from ep_bolfi.utility.preprocessing import SubstitutionDict
from pybamm import ParameterValues
import math
li_metal_literature = ParameterValues("Ecker2015_graphite_halfcell")

# ---- From cell sheet (converted to SI) ----
electrode_diameter_m = 18e-3                 # 18 mm
electrode_area_m2 = math.pi * (electrode_diameter_m/2)**2  # ≈ 2.54469e-4 m^2
positive_thickness_m = 0.028e-3              # 0.028 mm = 28e-6 m
separator_thickness_m = 0.020e-3             # 0.020 mm = 20e-6 m
separator_porosity = 0.48                    # 48 %
capacity_Ah = 0.002799                       # 2.799 mAh
particle_diameter_m = 0.000945 * 1e-2        # 0.000945 cm → m
particle_radius_m = particle_diameter_m / 2  # 4.725e-6 m

def electrode_length(par):
    return par["Current collector perpendicular area [m2]"]**0.5


def init_electrode_concentration(par):
    return 0.8 * max_electrode_concentration(par)


def max_electrode_concentration(par):
    return (
        par["Nominal cell capacity [A.h]"] * 3600
        / 96485.33212
        / (
            par["Positive electrode thickness [m]"]
            * par["Current collector perpendicular area [m2]"]
            * par["Positive electrode porosity"]
        )
    )


def specific_surface_area(par):
    return (
        3
        * (1 - par["Positive electrode porosity"])
        / par["Positive particle radius [m]"]
    )
# def OCV_Curve_Fit(SOC):
#     return (
#           (SOC < 0.006015075376884422) * ((
#               1347.4932840793026 * SOC
#             + -25.914354300145625) * SOC
#             + 0.47298423567964204)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
#               620.1790509875382 * SOC
#             + -17.1646544306899) * SOC
#             + 0.446669183559696)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
#               52.56501126889884 * SOC
#             + -4.642917574585265) * SOC
#             + 0.3776108609487674)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
#               34.4116357063981 * SOC
#             + -3.878286449133599) * SOC
#             + 0.36955917992673715)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
#               8.341573942795364 * SOC
#             + -1.9957397780633785) * SOC
#             + 0.33557400949548216)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.12637688442211056) * ((
#               2.2236609468362936 * SOC
#             + -1.1857772866486167) * SOC
#             + 0.308765879094963)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.19157286432160803) * ((
#               -1.3213888563894294 * SOC
#             + -0.28975258814285354) * SOC
#             + 0.25214747421375344)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.22166331658291458) * ((
#               9.386519160260526 * SOC
#             + -4.392441807426735) * SOC
#             + 0.6451294367935505)
#         + (SOC >= 0.22166331658291458) * (SOC < 0.2517537688442211) * ((
#               3.233228492696714 * SOC
#             + -1.6645241728849491) * SOC
#             + 0.3427898016747759)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * ((
#               0.022303263424673148 * SOC
#             + -0.04779911699248762) * SOC
#             + 0.13928148867186957)
#         + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * ((
#               0.006928595935441706 * SOC
#             + -0.03620260020455213) * SOC
#             + 0.13709478769594674)
#         + (SOC >= 0.44232663316582915) * (SOC < 0.5025075376884423) * ((
#               -1.146143210003963 * SOC
#             + 0.9838661392346744) * SOC
#             + -0.08850699786098826)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * ((
#               -65.84990202553507 * SOC
#             + 66.01211918239346) * SOC
#             + -16.427100656310316)
#         + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * ((
#               41.946447419856725 * SOC
#             + -44.48726435210659) * SOC
#             + 11.890448649220616)
#         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
#               19.619813138802755 * SOC
#             + -21.152902286567837) * SOC
#             + 5.7935550674180405)
#         + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * ((
#               0.27472296562790177 * SOC
#             + -0.3525558325265834) * SOC
#             + 0.20228605891150586)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
#               0.19357304184396007 * SOC
#             + -0.26041763815829455) * SOC
#             + 0.17613247038796764)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
#               0.01454787327933671 * SOC
#             + -0.03560340914341342) * SOC
#             + 0.10555379425434808)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
#               -0.017455765814543334 * SOC
#             + 0.012610796851900474) * SOC
#             + 0.08739484635361627)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
#               -0.3937242988050471 * SOC
#             + 0.6738186031318776) * SOC
#             + -0.203086369023886)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
#               0.5403508815015101 * SOC
#             + -1.0238231393917232) * SOC
#             + 0.5682614696513468)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9689095477386934) * ((
#               -4.329572565554756 * SOC
#             + 8.120131111827249) * SOC
#             + -3.7239979599566695)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9839547738693467) * ((
#               -86.72723251421931 * SOC
#             + 167.79188998300168) * SOC
#             + -81.07774379721234)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9939849246231156) * ((
#               -234.5528062309632 * SOC
#             + 458.69924790013204) * SOC
#             + -224.19758558535182)
#         + (SOC >= 0.9939849246231156) * ((
#               -1714.7823069619537 * SOC
#             + 3401.3508653181434) * SOC
#             + -1686.6732586510175)
#     )


def OCV_Curve_Fit(SOC):
    return (
          (SOC < 0.006015075376884422) * ((
              6454.526192813781 * SOC
            + -109.99096425422131) * SOC
            + 1.3780120418449677)
        + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
              1664.4449928048562 * SOC
            + -52.36556529531998) * SOC
            + 1.2047014826645535)
        + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
              273.64245567230046 * SOC
            + -21.684041988727465) * SOC
            + 1.03549056895106)
        + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
              117.80159729584864 * SOC
            + -15.119931059524362) * SOC
            + 0.9663694913020889)
        + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
              11.758999406062458 * SOC
            + -7.462483161653864) * SOC
            + 0.8281313929448038)
        + (SOC >= 0.06619597989949749) * (SOC < 0.08124120603015075) * ((
              24.667498692758045 * SOC
            + -9.171464680283435) * SOC
            + 0.8846952460727113)
        + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
              106.37252331573148 * SOC
            + -22.447094158470456) * SOC
            + 1.42395932088138)
        + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
              22.99209139952763 * SOC
            + -6.390285555994271) * SOC
            + 0.6509329147707108)
        + (SOC >= 0.12637688442211056) * (SOC < 0.2517537688442211) * ((
              1.5263797414812035 * SOC
            + -0.9647460334997117) * SOC
            + 0.3081015241897664)
        + (SOC >= 0.2517537688442211) * (SOC < 0.5025075376884423) * ((
              -0.0012893655984924646 * SOC
            + -0.195553122991313) * SOC
            + 0.21127791709539379)
        + (SOC >= 0.5025075376884423) * (SOC < 0.5677035175879397) * ((
              0.03775922095297446 * SOC
            + -0.23479754114769769) * SOC
            + 0.22113822506328296)
        + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
              1.5100263541424326 * SOC
            + -1.906420001829236) * SOC
            + 0.6956312005672403)
        + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
              -0.034029838510602595 * SOC
            + 0.03255765863111115) * SOC
            + 0.08690426665553397)
        + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
              -0.14468303281629424 * SOC
            + 0.19925919806054715) * SOC
            + 0.024119356959723337)
        + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
              -6.930915528557158 * SOC
            + 12.124545284973067) * SOC
            + -5.214886540051744)
        + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
              -0.5966674356694099 * SOC
            + 0.6123199344852068) * SOC
            + 0.015857921521561735)
        + (SOC >= 0.938819095477387) * (SOC < 0.9689095477386934) * ((
              -14.271913036640505 * SOC
            + 26.28948334555478) * SOC
            + -12.03724774248115)
        + (SOC >= 0.9689095477386934) * (SOC < 0.9839547738693467) * ((
              -35.50579523207783 * SOC
            + 67.43690573499055) * SOC
            + -31.97131295146174)
        + (SOC >= 0.9839547738693467) * (SOC < 0.9939849246231156) * ((
              -854.1774752673916 * SOC
            + 1678.5087213397615) * SOC
            + -824.5822149567967)
        + (SOC >= 0.9939849246231156) * ((
              -8832.735084375538 * SOC
            + 17539.64068872085) * SOC
            + -8707.44524647409)
    )

parameters = SubstitutionDict({
    ###############
    # Interphase. #
    ###############
    "Exchange-current density for lithium metal electrode [A.m-2]": (
        li_metal_literature[
            "Exchange-current density for lithium metal electrode [A.m-2]"
        ]
    ),
    ##########################################################
    # Electrolyte: 1.2 M LiPF6 in EC:EMC 3:7 with 0.5 % FEC. #
    ##########################################################
    "Cation transference number": 0.25,
    "Electrolyte conductivity [S.m-1]": 0.88,
    "Electrolyte diffusivity [m2.s-1]": 2.5e-10,
    "Initial concentration in electrolyte [mol.m-3]": 1200.0,
    "Thermodynamic factor": 2.25,
    ################################
    # Counter-electrode: Li-metal. #
    ################################
    "Lithium metal partial molar volume [m3.mol-1]": (
        li_metal_literature["Lithium metal partial molar volume [m3.mol-1]"]
    ),
    "Negative electrode conductivity [S.m-1]": 10.6e6,
    "Negative electrode thickness [m]": 500e-6,
    #########################################
    # Separator: Whatman GF/A from El-Cell. #
    # Reference electrode is in its middle. #
    #########################################
    "Separator Bruggeman coefficient": 1.5,
    # "Separator porosity": 0.93,
     "Separator porosity": separator_porosity,
    # "Separator thickness [m]": 260e-6,
    "Separator thickness [m]": separator_thickness_m,
    ###############################
    # Sample electrode: graphite. #
    ###############################
    # "Nominal cell capacity [A.h]": 11.355 / 3600,
    "Nominal cell capacity [A.h]": capacity_Ah,
    # Placeholder.
    "Positive electrode Bruggeman coefficient": 1.5,
    "Positive electrode conductivity [S.m-1]": 40.0,
    # Placeholder.
    "Positive electrode exchange-current density [A.m-2]": (
        li_metal_literature[
            "Positive electrode exchange-current density [A.m-2]"
        ]
    ),
    #OCV_Curve_Fit
    "Positive electrode OCP [V]": OCV_Curve_Fit,
    "Positive electrode OCP entropic change [V.K-1]": 0,
    "Positive electrode porosity": 0.44,
    # "Positive electrode thickness [m]": 28e-6,
    "Positive electrode thickness [m]": positive_thickness_m,
    "Positive electrode active material volume fraction": 1,
    # Placeholder.
    "Positive electrode diffusivity [m2.s-1]": (
        li_metal_literature["Positive electrode diffusivity [m2.s-1]"]
    ),
    # "Positive particle radius [m]": 10 * 4.7e-6,
    "Positive particle radius [m]": particle_radius_m,
    ##################
    # Cell geometry. #
    ##################
    # "Current collector perpendicular area [m2]": 2.545e-4,
    "Current collector perpendicular area [m2]": electrode_area_m2,
    "Number of cells connected in series to make a battery": 1,
    "Number of electrodes connected in parallel to make a cell": 1,
    #######################
    # Ambient conditions. #
    #######################
    "Ambient temperature [K]": 298.15,
    "Initial temperature [K]": 298.15,
    "Reference temperature [K]": 298.15,
    #####################
    # Operation limits. #
    #####################
    # "Lower voltage cut-off [V]": 0.0,
    "Lower voltage cut-off [V]": 0.01,
    # "Open-circuit voltage at 0% SOC [V]": 0.0,
     "Open-circuit voltage at 0% SOC [V]": 0.01,
    # "Open-circuit voltage at 100% SOC [V]": 0.9,
    "Open-circuit voltage at 100% SOC [V]": 1.5,
    # "Upper voltage cut-off [V]": 0.9,
    "Upper voltage cut-off [V]": 1.5,
},
substitutions={
    ##################################################
    # Parameters determined from proxy measurements. #
    ##################################################
    "Initial concentration in positive electrode [mol.m-3]": (
        init_electrode_concentration
    ),
    "Maximum concentration in positive electrode [mol.m-3]": (
        max_electrode_concentration
    ),
    #############################################################
    # Parameters that are intrinsically linked in 1D+1D models. #
    #############################################################
    "Positive electrode surface area to volume ratio [m-1]": (
        specific_surface_area
    ),
    ####################################################################
    # Parameters that we set the same, but PyBaMM could set different. #
    ####################################################################
    "Electrode height [m]": electrode_length,
    "Electrode width [m]": electrode_length,
    "Positive electrode Bruggeman coefficient (electrode)": (
        "Positive electrode Bruggeman coefficient"
    ),
    "Positive electrode Bruggeman coefficient (electrolyte)": (
        "Positive electrode Bruggeman coefficient"
    ),
    "Separator Bruggeman coefficient (electrode)": (
        "Separator Bruggeman coefficient"
    ),
    "Separator Bruggeman coefficient (electrolyte)": (
        "Separator Bruggeman coefficient"
    ),
})

unknowns = {
    "Positive electrode diffusivity [m2.s-1]": (1e-15, 1e-9),
    "Positive electrode Bruggeman coefficient": (1.0, 3.0),
#     "Positive electrode exchange-current density [A.m-2]": (0.5, 5.0),
}

transform_unknowns = {
    "Positive electrode diffusivity [m2.s-1]": 'log',
#     "Positive electrode exchange-current density [A.m-2]": 'log',
}


# def OCV_Curve_Fit(SOC):
#     return (
#           (SOC < 0.006015075376884422) * ((
#               6454.526192813781 * SOC
#             + -109.99096425422131) * SOC
#             + 1.3780120418449677)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
#               1664.4449928048562 * SOC
#             + -52.36556529531998) * SOC
#             + 1.2047014826645535)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
#               273.64245567230046 * SOC
#             + -21.684041988727465) * SOC
#             + 1.03549056895106)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
#               117.80159729584864 * SOC
#             + -15.119931059524362) * SOC
#             + 0.9663694913020889)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
#               11.758999406062458 * SOC
#             + -7.462483161653864) * SOC
#             + 0.8281313929448038)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.08124120603015075) * ((
#               24.667498692758045 * SOC
#             + -9.171464680283435) * SOC
#             + 0.8846952460727113)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
#               106.37252331573148 * SOC
#             + -22.447094158470456) * SOC
#             + 1.42395932088138)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
#               22.99209139952763 * SOC
#             + -6.390285555994271) * SOC
#             + 0.6509329147707108)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.2517537688442211) * ((
#               1.5263797414812035 * SOC
#             + -0.9647460334997117) * SOC
#             + 0.3081015241897664)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.5025075376884423) * ((
#               -0.0012893655984924646 * SOC
#             + -0.195553122991313) * SOC
#             + 0.21127791709539379)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.5677035175879397) * ((
#               0.03775922095297446 * SOC
#             + -0.23479754114769769) * SOC
#             + 0.22113822506328296)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
#               1.5100263541424326 * SOC
#             + -1.906420001829236) * SOC
#             + 0.6956312005672403)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
#               -0.034029838510602595 * SOC
#             + 0.03255765863111115) * SOC
#             + 0.08690426665553397)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
#               -0.14468303281629424 * SOC
#             + 0.19925919806054715) * SOC
#             + 0.024119356959723337)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
#               -6.930915528557158 * SOC
#             + 12.124545284973067) * SOC
#             + -5.214886540051744)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
#               -0.5966674356694099 * SOC
#             + 0.6123199344852068) * SOC
#             + 0.015857921521561735)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9689095477386934) * ((
#               -14.271913036640505 * SOC
#             + 26.28948334555478) * SOC
#             + -12.03724774248115)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9839547738693467) * ((
#               -35.50579523207783 * SOC
#             + 67.43690573499055) * SOC
#             + -31.97131295146174)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9939849246231156) * ((
#               -854.1774752673916 * SOC
#             + 1678.5087213397615) * SOC
#             + -824.5822149567967)
#         + (SOC >= 0.9939849246231156) * ((
#               -8832.735084375538 * SOC
#             + 17539.64068872085) * SOC
#             + -8707.44524647409)
#     )

def TE_0000003262_lithiation_extraction(SOC):
    return (
          (SOC < 0.006015075376884422) * ((
              3796.83317416261 * SOC
            + -62.73480757488008) * SOC
            + 0.8895692693129978)
        + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
              690.0582306864599 * SOC
            + -25.35983664683033) * SOC
            + 0.7771626356424561)
        + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
              167.22440456834192 * SOC
            + -13.825964804325125) * SOC
            + 0.7135524630437156)
        + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
              7.732562793529723 * SOC
            + -7.108072252785057) * SOC
            + 0.6428120417283776)
        + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * ((
              -29.52026500215561 * SOC
            + -4.418006245629272) * SOC
            + 0.5942489154434178)
        + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * ((
              175.38168188917552 * SOC
            + -23.324586892959132) * SOC
            + 1.0303828775618458)
        + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * ((
              120.30834478797806 * SOC
            + -17.690501482375282) * SOC
            + 0.8862890197871396)
        + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * ((
              62.43772225903513 * SOC
            + -10.609347419160315) * SOC
            + 0.669673314461404)
        + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * ((
              39.71951139583257 * SOC
            + -7.601638959854114) * SOC
            + 0.5701242101035175)
        + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * ((
              99.08819759472317 * SOC
            + -16.652529421673023) * SOC
            + 0.915081389539024)
        + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
              12.653399803860452 * SOC
            + -2.6083949906691757) * SOC
            + 0.344600180126863)
        + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
              -0.18079163077010207 * SOC
            + -0.13687798485051772) * SOC
            + 0.22561340286934772)
        + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * ((
              -20.63152799276571 * SOC
            + 5.032122706283445) * SOC
            + -0.10100769859127556)
        + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * ((
              5.5942575652046855 * SOC
            + -2.6487377655237907) * SOC
            + 0.46137409791358497)
        + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * ((
              2.4908350011221074 * SOC
            + -1.6464414429429297) * SOC
            + 0.3804474840288208)
        + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * ((
              -1.7551771802641838 * SOC
            + -0.01960001187769933) * SOC
            + 0.2246181476557041)
        + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * ((
              9.482908887799738 * SOC
            + -4.6635837793207315) * SOC
            + 0.7043836767159011)
        + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
              9.666235984758828 * SOC
            + -4.7448575639837) * SOC
            + 0.7133913850457159)
        + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
              3.559857544760767 * SOC
            + -1.853993680404713) * SOC
            + 0.37124529651308125)
        + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * ((
              0.1405942024173763 * SOC
            + -0.13236881419305035) * SOC
            + 0.15453252221072356)
        + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * ((
              -0.19749372401334497 * SOC
            + 0.12263782691950809) * SOC
            + 0.10644711163570753)
        + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * ((
              -0.5563780009265145 * SOC
            + 0.4401259747258166) * SOC
            + 0.036230379891094344)
        + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * ((
              -2.3410418719803374 * SOC
            + 2.1263373835865593) * SOC
            + -0.36206715970288883)
        + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * ((
              -12.111447874125247 * SOC
            + 11.651746772913782) * SOC
            + -2.683706199430773)
        + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * ((
              -28.75277657418451 * SOC
            + 28.376532990775445) * SOC
            + -6.885871769782398)
        + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * ((
              32.02681788459779 * SOC
            + -33.927132705943166) * SOC
            + 9.080616629053821)
        + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
              12.45312774317648 * SOC
            + -13.469970781354789) * SOC
            + 3.7354891775466257)
        + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * ((
              0.6695615379886348 * SOC
            + -0.799972485254095) * SOC
            + 0.3297108667216655)
        + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
              0.1693613393040243 * SOC
            + -0.2320416606712179) * SOC
            + 0.16850270329051353)
        + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
              0.019732088293821004 * SOC
            + -0.04414190906846871) * SOC
            + 0.10951303981560945)
        + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
              -0.03485357179855786 * SOC
            + 0.03809262220979903) * SOC
            + 0.07854099457922548)
        + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
              -0.33588186354069904 * SOC
            + 0.5670825295748472) * SOC
            + -0.15385437304104954)
        + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
              -0.4365655116458811 * SOC
            + 0.7500707594481781) * SOC
            + -0.23699769596969844)
        + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
              -9.933948732168204 * SOC
            + 18.58272020843401) * SOC
            + -8.607813608800711)
        + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
              -72.93596313959816 * SOC
            + 138.77346767380027) * SOC
            + -65.93064650610825)
        + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * ((
              9.26995702809063 * SOC
            + -20.526734188435967) * SOC
            + 11.243096764402935)
        + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * ((
              435.1364714128962 * SOC
            + -850.0505032279702) * SOC
            + 415.1899088280236)
        + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
              -383.079292268435 * SOC
            + 751.917282771994) * SOC
            + -368.9250218826975)
        + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
              151.75008294452346 * SOC
            + -300.5785511207064) * SOC
            + 148.8791282354632)
        + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
              -888.3864044908313 * SOC
            + 1756.7486992281872) * SOC
            + -868.4381820783909)
        + (SOC >= 0.9939849246231156) * ((
              -1149.9297243353903 * SOC
            + 2276.6889333509334) * SOC
            + -1126.8445592899031)
    )
