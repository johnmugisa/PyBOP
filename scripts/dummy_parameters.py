# from ep_bolfi.utility.preprocessing import SubstitutionDict
# from pybamm import ParameterValues

# li_metal_literature = ParameterValues("Ecker2015_graphite_halfcell")


# def electrode_length(par):
#     return par["Current collector perpendicular area [m2]"]**0.5


# def init_electrode_concentration(par):
#     return 0.8 * max_electrode_concentration(par)


# def max_electrode_concentration(par):
#     return (
#         par["Nominal cell capacity [A.h]"] * 3600
#         / 96485.33212
#         / (
#             par["Positive electrode thickness [m]"]
#             * par["Current collector perpendicular area [m2]"]
#             * par["Positive electrode porosity"]
#         )
#     )


# def specific_surface_area(par):
#     return (
#         3
#         * (1 - par["Positive electrode porosity"])
#         / par["Positive particle radius [m]"]
#     )


# def TE_0000003262_lithiation_extraction(SOC):
#     return (
#           (SOC < 0.006015075376884422) * ((
#               3796.83317416261 * SOC
#             + -62.73480757488008) * SOC
#             + 0.8895692693129978)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
#               690.0582306864599 * SOC
#             + -25.35983664683033) * SOC
#             + 0.7771626356424561)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
#               167.22440456834192 * SOC
#             + -13.825964804325125) * SOC
#             + 0.7135524630437156)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
#               7.732562793529723 * SOC
#             + -7.108072252785057) * SOC
#             + 0.6428120417283776)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * ((
#               -29.52026500215561 * SOC
#             + -4.418006245629272) * SOC
#             + 0.5942489154434178)
#         + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * ((
#               175.38168188917552 * SOC
#             + -23.324586892959132) * SOC
#             + 1.0303828775618458)
#         + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * ((
#               120.30834478797806 * SOC
#             + -17.690501482375282) * SOC
#             + 0.8862890197871396)
#         + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * ((
#               62.43772225903513 * SOC
#             + -10.609347419160315) * SOC
#             + 0.669673314461404)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * ((
#               39.71951139583257 * SOC
#             + -7.601638959854114) * SOC
#             + 0.5701242101035175)
#         + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * ((
#               99.08819759472317 * SOC
#             + -16.652529421673023) * SOC
#             + 0.915081389539024)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
#               12.653399803860452 * SOC
#             + -2.6083949906691757) * SOC
#             + 0.344600180126863)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
#               -0.18079163077010207 * SOC
#             + -0.13687798485051772) * SOC
#             + 0.22561340286934772)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * ((
#               -20.63152799276571 * SOC
#             + 5.032122706283445) * SOC
#             + -0.10100769859127556)
#         + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * ((
#               5.5942575652046855 * SOC
#             + -2.6487377655237907) * SOC
#             + 0.46137409791358497)
#         + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * ((
#               2.4908350011221074 * SOC
#             + -1.6464414429429297) * SOC
#             + 0.3804474840288208)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * ((
#               -1.7551771802641838 * SOC
#             + -0.01960001187769933) * SOC
#             + 0.2246181476557041)
#         + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * ((
#               9.482908887799738 * SOC
#             + -4.6635837793207315) * SOC
#             + 0.7043836767159011)
#         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
#               9.666235984758828 * SOC
#             + -4.7448575639837) * SOC
#             + 0.7133913850457159)
#         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
#               3.559857544760767 * SOC
#             + -1.853993680404713) * SOC
#             + 0.37124529651308125)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * ((
#               0.1405942024173763 * SOC
#             + -0.13236881419305035) * SOC
#             + 0.15453252221072356)
#         + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * ((
#               -0.19749372401334497 * SOC
#             + 0.12263782691950809) * SOC
#             + 0.10644711163570753)
#         + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * ((
#               -0.5563780009265145 * SOC
#             + 0.4401259747258166) * SOC
#             + 0.036230379891094344)
#         + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * ((
#               -2.3410418719803374 * SOC
#             + 2.1263373835865593) * SOC
#             + -0.36206715970288883)
#         + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * ((
#               -12.111447874125247 * SOC
#             + 11.651746772913782) * SOC
#             + -2.683706199430773)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * ((
#               -28.75277657418451 * SOC
#             + 28.376532990775445) * SOC
#             + -6.885871769782398)
#         + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * ((
#               32.02681788459779 * SOC
#             + -33.927132705943166) * SOC
#             + 9.080616629053821)
#         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
#               12.45312774317648 * SOC
#             + -13.469970781354789) * SOC
#             + 3.7354891775466257)
#         + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * ((
#               0.6695615379886348 * SOC
#             + -0.799972485254095) * SOC
#             + 0.3297108667216655)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
#               0.1693613393040243 * SOC
#             + -0.2320416606712179) * SOC
#             + 0.16850270329051353)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
#               0.019732088293821004 * SOC
#             + -0.04414190906846871) * SOC
#             + 0.10951303981560945)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
#               -0.03485357179855786 * SOC
#             + 0.03809262220979903) * SOC
#             + 0.07854099457922548)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
#               -0.33588186354069904 * SOC
#             + 0.5670825295748472) * SOC
#             + -0.15385437304104954)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
#               -0.4365655116458811 * SOC
#             + 0.7500707594481781) * SOC
#             + -0.23699769596969844)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
#               -9.933948732168204 * SOC
#             + 18.58272020843401) * SOC
#             + -8.607813608800711)
#         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
#               -72.93596313959816 * SOC
#             + 138.77346767380027) * SOC
#             + -65.93064650610825)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * ((
#               9.26995702809063 * SOC
#             + -20.526734188435967) * SOC
#             + 11.243096764402935)
#         + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * ((
#               435.1364714128962 * SOC
#             + -850.0505032279702) * SOC
#             + 415.1899088280236)
#         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
#               -383.079292268435 * SOC
#             + 751.917282771994) * SOC
#             + -368.9250218826975)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
#               151.75008294452346 * SOC
#             + -300.5785511207064) * SOC
#             + 148.8791282354632)
#         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
#               -888.3864044908313 * SOC
#             + 1756.7486992281872) * SOC
#             + -868.4381820783909)
#         + (SOC >= 0.9939849246231156) * ((
#               -1149.9297243353903 * SOC
#             + 2276.6889333509334) * SOC
#             + -1126.8445592899031)
#     )


# def derivative_TE_0000003262_lithiation_extraction(SOC):
#     return (
#           (SOC < 0.006015075376884422) * (
#               7593.66634832522 * SOC
#             + -62.73480757488008)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * (
#               1380.1164613729197 * SOC
#             + -25.35983664683033)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * (
#               334.44880913668385 * SOC
#             + -13.825964804325125)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * (
#               15.465125587059447 * SOC
#             + -7.108072252785057)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * (
#               -59.04053000431122 * SOC
#             + -4.418006245629272)
#         + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * (
#               350.76336377835105 * SOC
#             + -23.324586892959132)
#         + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * (
#               240.61668957595612 * SOC
#             + -17.690501482375282)
#         + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * (
#               124.87544451807025 * SOC
#             + -10.609347419160315)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * (
#               79.43902279166514 * SOC
#             + -7.601638959854114)
#         + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * (
#               198.17639518944634 * SOC
#             + -16.652529421673023)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * (
#               25.306799607720905 * SOC
#             + -2.6083949906691757)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * (
#               -0.36158326154020415 * SOC
#             + -0.13687798485051772)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * (
#               -41.26305598553142 * SOC
#             + 5.032122706283445)
#         + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * (
#               11.188515130409371 * SOC
#             + -2.6487377655237907)
#         + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * (
#               4.981670002244215 * SOC
#             + -1.6464414429429297)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * (
#               -3.5103543605283676 * SOC
#             + -0.01960001187769933)
#         + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * (
#               18.965817775599476 * SOC
#             + -4.6635837793207315)
#         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * (
#               19.332471969517655 * SOC
#             + -4.7448575639837)
#         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * (
#               7.119715089521534 * SOC
#             + -1.853993680404713)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * (
#               0.2811884048347526 * SOC
#             + -0.13236881419305035)
#         + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * (
#               -0.39498744802668995 * SOC
#             + 0.12263782691950809)
#         + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * (
#               -1.112756001853029 * SOC
#             + 0.4401259747258166)
#         + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * (
#               -4.682083743960675 * SOC
#             + 2.1263373835865593)
#         + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * (
#               -24.222895748250494 * SOC
#             + 11.651746772913782)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * (
#               -57.50555314836902 * SOC
#             + 28.376532990775445)
#         + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * (
#               64.05363576919558 * SOC
#             + -33.927132705943166)
#         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * (
#               24.90625548635296 * SOC
#             + -13.469970781354789)
#         + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * (
#               1.3391230759772697 * SOC
#             + -0.799972485254095)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * (
#               0.3387226786080486 * SOC
#             + -0.2320416606712179)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * (
#               0.03946417658764201 * SOC
#             + -0.04414190906846871)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * (
#               -0.06970714359711572 * SOC
#             + 0.03809262220979903)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * (
#               -0.6717637270813981 * SOC
#             + 0.5670825295748472)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * (
#               -0.8731310232917622 * SOC
#             + 0.7500707594481781)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * (
#               -19.86789746433641 * SOC
#             + 18.58272020843401)
#         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * (
#               -145.87192627919632 * SOC
#             + 138.77346767380027)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * (
#               18.53991405618126 * SOC
#             + -20.526734188435967)
#         + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * (
#               870.2729428257924 * SOC
#             + -850.0505032279702)
#         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * (
#               -766.15858453687 * SOC
#             + 751.917282771994)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * (
#               303.5001658890469 * SOC
#             + -300.5785511207064)
#         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * (
#               -1776.7728089816626 * SOC
#             + 1756.7486992281872)
#         + (SOC >= 0.9939849246231156) * (
#               -2299.8594486707807 * SOC
#             + 2276.6889333509334)
#     )


# parameters = SubstitutionDict({
#     ###############
#     # Interphase. #
#     ###############
#     "Exchange-current density for lithium metal electrode [A.m-2]": (
#         li_metal_literature[
#             "Exchange-current density for lithium metal electrode [A.m-2]"
#         ]
#     ),
#     ##########################################################
#     # Electrolyte: 1.2 M LiPF6 in EC:EMC 3:7 with 0.5 % FEC. #
#     ##########################################################
#     "Cation transference number": 0.25,
#     "Electrolyte conductivity [S.m-1]": 0.88,
#     "Electrolyte diffusivity [m2.s-1]": 2.5e-10,
#     "Initial concentration in electrolyte [mol.m-3]": 1200.0,
#     "Thermodynamic factor": 2.25,
#     ################################
#     # Counter-electrode: Li-metal. #
#     ################################
#     "Lithium metal partial molar volume [m3.mol-1]": (
#         li_metal_literature["Lithium metal partial molar volume [m3.mol-1]"]
#     ),
#     "Negative electrode conductivity [S.m-1]": 10.6e6,
#     "Negative electrode thickness [m]": 500e-6,
#     #########################################
#     # Separator: Whatman GF/A from El-Cell. #
#     # Reference electrode is in its middle. #
#     #########################################
#     "Separator Bruggeman coefficient": 1.0,
#     "Separator porosity": 0.93,
#     "Separator thickness [m]": 260e-6,
#     ###############################
#     # Sample electrode: graphite. #
#     ###############################
#     "Nominal cell capacity [A.h]": 11.355 / 3600,
#     # Placeholder.
#     "Positive electrode Bruggeman coefficient": 1.5,
#     "Positive electrode conductivity [S.m-1]": 40.0,
#     # Placeholder.
#     "Positive electrode exchange-current density [A.m-2]": (
#         li_metal_literature[
#             "Positive electrode exchange-current density [A.m-2]"
#         ]
#     ),
#     "Positive electrode OCP [V]": TE_0000003262_lithiation_extraction,
#     "Positive electrode OCP entropic change [V.K-1]": 0,
#     "Positive electrode porosity": 0.44,
#     "Positive electrode thickness [m]": 28e-6,
#     "Positive electrode active material volume fraction": 1,
#     # Placeholder.
#     "Positive electrode diffusivity [m2.s-1]": (
#         li_metal_literature["Positive electrode diffusivity [m2.s-1]"]
#     ),
#     "Positive particle radius [m]": 10 * 4.7e-6,
#     ##################
#     # Cell geometry. #
#     ##################
#     "Current collector perpendicular area [m2]": 2.545e-4,
#     "Number of cells connected in series to make a battery": 1,
#     "Number of electrodes connected in parallel to make a cell": 1,
#     #######################
#     # Ambient conditions. #
#     #######################
#     "Ambient temperature [K]": 298.15,
#     "Initial temperature [K]": 298.15,
#     "Reference temperature [K]": 298.15,
#     #####################
#     # Operation limits. #
#     #####################
#     "Lower voltage cut-off [V]": 0.0,
#     "Open-circuit voltage at 0% SOC [V]": 0.0,
#     "Open-circuit voltage at 100% SOC [V]": 0.9,
#     "Upper voltage cut-off [V]": 0.9,
# },
# substitutions={
#     ##################################################
#     # Parameters determined from proxy measurements. #
#     ##################################################
#     "Initial concentration in positive electrode [mol.m-3]": (
#         init_electrode_concentration
#     ),
#     "Maximum concentration in positive electrode [mol.m-3]": (
#         max_electrode_concentration
#     ),
#     #############################################################
#     # Parameters that are intrinsically linked in 1D+1D models. #
#     #############################################################
#     "Positive electrode surface area to volume ratio [m-1]": (
#         specific_surface_area
#     ),
#     ####################################################################
#     # Parameters that we set the same, but PyBaMM could set different. #
#     ####################################################################
#     "Electrode height [m]": electrode_length,
#     "Electrode width [m]": electrode_length,
#     "Positive electrode Bruggeman coefficient (electrode)": (
#         "Positive electrode Bruggeman coefficient"
#     ),
#     "Positive electrode Bruggeman coefficient (electrolyte)": (
#         "Positive electrode Bruggeman coefficient"
#     ),
#     "Separator Bruggeman coefficient (electrode)": (
#         "Separator Bruggeman coefficient"
#     ),
#     "Separator Bruggeman coefficient (electrolyte)": (
#         "Separator Bruggeman coefficient"
#     ),
# })

# unknowns = {
#     "Positive electrode diffusivity [m2.s-1]": (1e-15, 1e-9),
#     "Positive electrode Bruggeman coefficient": (1.0, 3.0),
# #     "Positive electrode exchange-current density [A.m-2]": (0.5, 5.0),
# }

# transform_unknowns = {
#     "Positive electrode diffusivity [m2.s-1]": 'log',
# #     "Positive electrode exchange-current density [A.m-2]": 'log',
# }















# #### data 6806 delithiation#######
# # Parameters of OCV fit function:
# # SOC range of data: array([0.05058919, 0.96124685])
# # E₀: [0.29452475789370647, 0.21891050711355137, 0.13228601287411523, 0.09416628817720962]
# # a: [-0.11384065050417225, -2.9488271298412405, -2.904949238021846, -50.01955910953077]
# # Δx: [0.16454060232953868, 0.12367066840076057, 0.5063380060435893, 0.20545072322611146]
# #  C:\Users\mugi_jo\AppData\Roaming\Python\Python312\site-packages\ep_bolfi\utility\fitting_functions.py:1091: RuntimeWarning:overflow encountered in exp
# # Knots of interpolating spline:
# # [0.05       0.08165829 0.09522613 0.10879397 0.16306533 0.19472362
# #  0.20829146 0.2218593  0.24899497 0.27613065 0.38919598 0.50226131
# #  0.61532663 0.6741206  0.72839196 0.76005025 0.78718593 0.84145729
# #  0.89572864 0.92286432 0.95      ]
# # Coefficients of this spline:
# # [0.48150611 0.38209494 0.26071043 0.23686491 0.22452586 0.21331303
# #  0.20555919 0.19798364 0.1664406  0.15482161 0.14347827 0.13511404
# #  0.12757398 0.11977056 0.1132775  0.09500737 0.09505962 0.09432922
# #  0.09407925 0.09309464 0.09401112 0.08858277]


# # def OCV_Curve_Fit(SOC):
#     # return (
#     #       (SOC < 0.08165829145728642) * ((
#     #           3.698031497853634 * SOC
#     #         + -1.3047909696011573) * SOC
#     #         + 0.244599917097662)
#     #     + (SOC >= 0.08165829145728642) * (SOC < 0.10879396984924623) * ((
#     #           0.7097203918896042 * SOC
#     #         + -0.8167502110894347) * SOC
#     #         + 0.22467362984686956)
#     #     + (SOC >= 0.10879396984924623) * (SOC < 0.12236180904522613) * ((
#     #           5.438207168314705 * SOC
#     #         + -1.8456119066633647) * SOC
#     #         + 0.2806406039905256)
#     #     + (SOC >= 0.12236180904522613) * (SOC < 0.135929648241206) * ((
#     #           12.956913601366267 * SOC
#     #         + -3.6856169483196908) * SOC
#     #         + 0.3932137767652284)
#     #     + (SOC >= 0.135929648241206) * (SOC < 0.1630653266331658) * ((
#     #           2.076336432972049 * SOC
#     #         + -0.7276308939974285) * SOC
#     #         + 0.19217477483201972)
#     #     + (SOC >= 0.1630653266331658) * (SOC < 0.2761306532663316) * ((
#     #           0.12575376836321794 * SOC
#     #         + -0.09148609533856877) * SOC
#     #         + 0.1403081951423715)
#     #     + (SOC >= 0.2761306532663316) * (SOC < 0.38919597989949745) * ((
#     #           -0.11454835693864052 * SOC
#     #         + 0.04122347034321017) * SOC
#     #         + 0.12198560560917093)
#     #     + (SOC >= 0.38919597989949745) * (SOC < 0.4208542713567839) * ((
#     #           -1.9461310969284114 * SOC
#     #         + 1.4669127488578653) * SOC
#     #         + -0.15545066228268745)
#     #     + (SOC >= 0.4208542713567839) * (SOC < 0.4344221105527638) * ((
#     #           -15.52640927719142 * SOC
#     #         + 12.897548905611899) * SOC
#     #         + -2.5607666877302933)
#     #     + (SOC >= 0.4344221105527638) * (SOC < 0.4479899497487437) * ((
#     #           -5.784760088154542 * SOC
#     #         + 4.433573303679907) * SOC
#     #         + -0.7222976154010894)
#     #     + (SOC >= 0.4479899497487437) * (SOC < 0.45703517587939696) * ((
#     #           1.0095482324543354 * SOC
#     #         + -1.6539903825740794) * SOC
#     #         + 0.6412860595474967)
#     #     + (SOC >= 0.45703517587939696) * (SOC < 0.4615577889447236) * ((
#     #           41.07792602948257 * SOC
#     #         + -38.279306569908044) * SOC
#     #         + 9.010814972205878)
#     #     + (SOC >= 0.4615577889447236) * (SOC < 0.47512562814070347) * ((
#     #           10.878143241549338 * SOC
#     #         + -10.401416629489262) * SOC
#     #         + 2.5771863515338183)
#     #     + (SOC >= 0.47512562814070347) * (SOC < 0.5022613065326633) * ((
#     #           0.7661466416202423 * SOC
#     #         + -0.7924791568933607) * SOC
#     #         + 0.2944601253178867)
#     #     + (SOC >= 0.5022613065326633) * (SOC < 0.6153266331658291) * ((
#     #           0.059075916975336096 * SOC
#     #         + -0.08221062495107123) * SOC
#     #         + 0.116089924896703)
#     #     + (SOC >= 0.6153266331658291) * (SOC < 0.728391959798995) * ((
#     #           -0.0018742157039794982 * SOC
#     #         + -0.007202145085924094) * SOC
#     #         + 0.09301256720954876)
#     #     + (SOC >= 0.728391959798995) * (SOC < 0.8414572864321608) * ((
#     #           -0.039587407621262116 * SOC
#     #         + 0.04773782645588476) * SOC
#     #         + 0.07300365043822943)
#     #     + (SOC >= 0.8414572864321608) * (SOC < 0.8685929648241206) * ((
#     #           -0.6197129170391662 * SOC
#     #         + 1.0240395003456229) * SOC
#     #         + -0.3377544281869902)
#     #     + (SOC >= 0.8685929648241206) * (SOC < 0.8821608040201006) * ((
#     #           -0.7086946015035664 * SOC
#     #         + 1.178617230593602) * SOC
#     #         + -0.40488699269292283)
#     #     + (SOC >= 0.8821608040201006) * (SOC < 0.8912060301507537) * ((
#     #           -15.79183324961923 * SOC
#     #         + 27.790124664530367) * SOC
#     #         + -12.142701389747401)
#     #     + (SOC >= 0.8912060301507537) * (SOC < 0.8957286432160804) * ((
#     #           -48.76107024787248 * SOC
#     #         + 86.55489030915595) * SOC
#     #         + -38.32845814119031)
#     #     + (SOC >= 0.8957286432160804) * ((
#     #           -4.649788918117044 * SOC
#     #         + 7.531413957106269) * SOC
#     #         + -2.9366625136705444)
#     # )

# # def derivative_OCV_Curve_Fit(SOC):
#     # return (
#     #       (SOC < 0.08165829145728642) * (
#     #           7.396062995707268 * SOC
#     #         + -1.3047909696011573)
#     #     + (SOC >= 0.08165829145728642) * (SOC < 0.10879396984924623) * (
#     #           1.4194407837792085 * SOC
#     #         + -0.8167502110894347)
#     #     + (SOC >= 0.10879396984924623) * (SOC < 0.12236180904522613) * (
#     #           10.87641433662941 * SOC
#     #         + -1.8456119066633647)
#     #     + (SOC >= 0.12236180904522613) * (SOC < 0.135929648241206) * (
#     #           25.913827202732534 * SOC
#     #         + -3.6856169483196908)
#     #     + (SOC >= 0.135929648241206) * (SOC < 0.1630653266331658) * (
#     #           4.152672865944098 * SOC
#     #         + -0.7276308939974285)
#     #     + (SOC >= 0.1630653266331658) * (SOC < 0.2761306532663316) * (
#     #           0.2515075367264359 * SOC
#     #         + -0.09148609533856877)
#     #     + (SOC >= 0.2761306532663316) * (SOC < 0.38919597989949745) * (
#     #           -0.22909671387728103 * SOC
#     #         + 0.04122347034321017)
#     #     + (SOC >= 0.38919597989949745) * (SOC < 0.4208542713567839) * (
#     #           -3.8922621938568227 * SOC
#     #         + 1.4669127488578653)
#     #     + (SOC >= 0.4208542713567839) * (SOC < 0.4344221105527638) * (
#     #           -31.05281855438284 * SOC
#     #         + 12.897548905611899)
#     #     + (SOC >= 0.4344221105527638) * (SOC < 0.4479899497487437) * (
#     #           -11.569520176309084 * SOC
#     #         + 4.433573303679907)
#     #     + (SOC >= 0.4479899497487437) * (SOC < 0.45703517587939696) * (
#     #           2.019096464908671 * SOC
#     #         + -1.6539903825740794)
#     #     + (SOC >= 0.45703517587939696) * (SOC < 0.4615577889447236) * (
#     #           82.15585205896514 * SOC
#     #         + -38.279306569908044)
#     #     + (SOC >= 0.4615577889447236) * (SOC < 0.47512562814070347) * (
#     #           21.756286483098677 * SOC
#     #         + -10.401416629489262)
#     #     + (SOC >= 0.47512562814070347) * (SOC < 0.5022613065326633) * (
#     #           1.5322932832404845 * SOC
#     #         + -0.7924791568933607)
#     #     + (SOC >= 0.5022613065326633) * (SOC < 0.6153266331658291) * (
#     #           0.11815183395067219 * SOC
#     #         + -0.08221062495107123)
#     #     + (SOC >= 0.6153266331658291) * (SOC < 0.728391959798995) * (
#     #           -0.0037484314079589964 * SOC
#     #         + -0.007202145085924094)
#     #     + (SOC >= 0.728391959798995) * (SOC < 0.8414572864321608) * (
#     #           -0.07917481524252423 * SOC
#     #         + 0.04773782645588476)
#     #     + (SOC >= 0.8414572864321608) * (SOC < 0.8685929648241206) * (
#     #           -1.2394258340783324 * SOC
#     #         + 1.0240395003456229)
#     #     + (SOC >= 0.8685929648241206) * (SOC < 0.8821608040201006) * (
#     #           -1.417389203007133 * SOC
#     #         + 1.178617230593602)
#     #     + (SOC >= 0.8821608040201006) * (SOC < 0.8912060301507537) * (
#     #           -31.58366649923846 * SOC
#     #         + 27.790124664530367)
#     #     + (SOC >= 0.8912060301507537) * (SOC < 0.8957286432160804) * (
#     #           -97.52214049574496 * SOC
#     #         + 86.55489030915595)
#     #     + (SOC >= 0.8957286432160804) * (
#     #           -9.299577836234088 * SOC
#     #         + 7.531413957106269)
#     # )

# ###data_six
# # def OCV_Curve_Fit(SOC):
# #     return (
# #           (SOC < 0.014924623115577889) * ((
# #               11191.545801806122 * SOC
# #             + -278.9731136695399) * SOC
# #             + 2.299492681811756)
# #         + (SOC >= 0.014924623115577889) * (SOC < 0.01984924623115578) * ((
# #               -11281.509963574748 * SOC
# #             + 391.83066143780843) * SOC
# #             + -2.7062540821802665)
# #         + (SOC >= 0.01984924623115578) * (SOC < 0.024773869346733667) * ((
# #               11488.515272609897 * SOC
# #             + -512.1050137675114) * SOC
# #             + 6.264966814957957)
# #         + (SOC >= 0.024773869346733667) * (SOC < 0.029698492462311557) * ((
# #               -11825.229097960273 * SOC
# #             + 643.0383002717941) * SOC
# #             + -8.04371795442339)
# #         + (SOC >= 0.029698492462311557) * (SOC < 0.03462311557788945) * ((
# #               12301.365701419301 * SOC
# #             + -790.0086873094447) * SOC
# #             + 13.235949624986466)
# #         + (SOC >= 0.03462311557788945) * (SOC < 0.03954773869346734) * ((
# #               -12929.044823775193 * SOC
# #             + 957.1021520733701) * SOC
# #             + -17.00926063468085)
# #         + (SOC >= 0.03954773869346734) * (SOC < 0.04447236180904523) * ((
# #               13694.486537417624 * SOC
# #             + -1148.6987706662026) * SOC
# #             + 24.63057168180266)
# #         + (SOC >= 0.04447236180904523) * (SOC < 0.04939698492462312) * ((
# #               -14654.416260262835 * SOC
# #             + 1372.786553549597) * SOC
# #             + -31.437632135558726)
# #         + (SOC >= 0.04939698492462312) * (SOC < 0.05432160804020101) * ((
# #               4654.596932441372 * SOC
# #             + -534.8275136291202) * SOC
# #             + 15.677559523654331)
# #         + (SOC >= 0.05432160804020101) * (SOC < 0.0592462311557789) * ((
# #               3852.8588069618218 * SOC
# #             + -447.7241052227487) * SOC
# #             + 13.311760918446101)
# #         + (SOC >= 0.0592462311557789) * (SOC < 0.06417085427135678) * ((
# #               -1981.2191478287086 * SOC
# #             + 243.5701569579585) * SOC
# #             + -7.166528908464802)
# #         + (SOC >= 0.06417085427135678) * (SOC < 0.06909547738693467) * ((
# #               1122.2681426419404 * SOC
# #             + -154.73670434164148) * SOC
# #             + 5.613316867404269)
# #         + (SOC >= 0.06909547738693467) * (SOC < 0.07402010050251256) * ((
# #               -176.38369111703048 * SOC
# #             + 24.725232484346634) * SOC
# #             + -0.5866872314835221)
# #         + (SOC >= 0.07402010050251256) * (SOC < 0.13311557788944725) * ((
# #               7.419217762006568 * SOC
# #             + -2.4849870914140433) * SOC
# #             + 0.4203643623631078)
# #         + (SOC >= 0.13311557788944725) * (SOC < 0.2562311557788945) * ((
# #               -0.4305557654953063 * SOC
# #             + -0.3951328125846505) * SOC
# #             + 0.28126828234755363)
# #         + (SOC >= 0.2562311557788945) * (SOC < 0.275929648241206) * ((
# #               5.594173211710967 * SOC
# #             + -3.4825793507529568) * SOC
# #             + 0.6768182797877582)
# #         + (SOC >= 0.275929648241206) * (SOC < 0.2907035175879397) * ((
# #               12.295882643830481 * SOC
# #             + -7.180980003192019) * SOC
# #             + 1.1870674753290373)
# #         + (SOC >= 0.2907035175879397) * (SOC < 0.32025125628140705) * ((
# #               -0.4715887410810069 * SOC
# #             + 0.2421176814022843) * SOC
# #             + 0.10810717117381152)
# #         + (SOC >= 0.32025125628140705) * (SOC < 0.3497989949748744) * ((
# #               0.44547941011562386 * SOC
# #             + -0.34526677363051306) * SOC
# #             + 0.2021624759960181)
# #         + (SOC >= 0.3497989949748744) * (SOC < 0.3793467336683417) * ((
# #               0.15652535037839144 * SOC
# #             + -0.14311509425051483) * SOC
# #             + 0.16680624885621675)
# #         + (SOC >= 0.3793467336683417) * (SOC < 0.502462311557789) * ((
# #               -0.08330755432782855 * SOC
# #             + 0.038844563802477694) * SOC
# #             + 0.132293347885313)
# #         + (SOC >= 0.502462311557789) * (SOC < 0.5221608040201006) * ((
# #               -1.9132035749535135 * SOC
# #             + 1.8777521326704516) * SOC
# #             + -0.329697526011941)
# #         + (SOC >= 0.5221608040201006) * (SOC < 0.5369346733668342) * ((
# #               -5.253164832015102 * SOC
# #             + 5.365745843436912) * SOC
# #             + -1.2403443262273584)
# #         + (SOC >= 0.5369346733668342) * (SOC < 0.54678391959799) * ((
# #               -52.51539339967212 * SOC
# #             + 56.119204360564254) * SOC
# #             + -14.865990161792837)
# #         + (SOC >= 0.54678391959799) * (SOC < 0.5517085427135678) * ((
# #               33.19654323337886 * SOC
# #             + -37.61261297654414) * SOC
# #             + 10.759535075520773)
# #         + (SOC >= 0.5517085427135678) * (SOC < 0.5615577889447236) * ((
# #               31.338474245704106 * SOC
# #             + -35.562387909641416) * SOC
# #             + 10.19397173357288)
# #         + (SOC >= 0.5615577889447236) * (SOC < 0.5664824120603016) * ((
# #               15.99915411085044 * SOC
# #             + -18.33455851195447) * SOC
# #             + 5.3567608411317735)
# #         + (SOC >= 0.5664824120603016) * (SOC < 0.5960301507537689) * ((
# #               2.084439837878591 * SOC
# #             + -2.5696767029881613) * SOC
# #             + 0.8914967046373619)
# #         + (SOC >= 0.5960301507537689) * (SOC < 0.6255778894472362) * ((
# #               0.5984121819486568 * SOC
# #             + -0.7982421274117932) * SOC
# #             + 0.36358249607175264)
# #         + (SOC >= 0.6255778894472362) * (SOC < 0.7486934673366834) * ((
# #               0.09179350412323206 * SOC
# #             + -0.16438324095461798) * SOC
# #             + 0.1653184438731301)
# #         + (SOC >= 0.7486934673366834) * (SOC < 0.7831658291457286) * ((
# #               -0.07058356294189139 * SOC
# #             + 0.07875805775928058) * SOC
# #             + 0.07429929287970793)
# #         + (SOC >= 0.7831658291457286) * (SOC < 0.812713567839196) * ((
# #               -0.05831541937970286 * SOC
# #             + 0.05954207610935214) * SOC
# #             + 0.0818239429805594)
# #         + (SOC >= 0.812713567839196) * (SOC < 0.8422613065326634) * ((
# #               0.24017460919738198 * SOC
# #             + -0.42563171606924755) * SOC
# #             + 0.27897760481234)
# #         + (SOC >= 0.8422613065326634) * (SOC < 0.8718090452261307) * ((
# #               -0.6309558659960857 * SOC
# #             + 1.0418072683244972) * SOC
# #             + -0.33900593331388507)
# #         + (SOC >= 0.8718090452261307) * (SOC < 0.9309045226130653) * ((
# #               0.3046882134407074 * SOC
# #             + -0.5895986748060551) * SOC
# #             + 0.3721312955145599)
# #         + (SOC >= 0.9309045226130653) * ((
# #               -2.853630104527806 * SOC
# #             + 5.290586937291096) * SOC
# #             + -2.3648143945382074)
# #     )

# ##data_two
# # def OCV_Curve_Fit(SOC):
# #     return (
# #           (SOC < 0.0057688442211055275) * ((
# #               670.690060953033 * SOC
# #             + -11.691735359606815) * SOC
# #             + 0.33088332938690096)
# #         + (SOC >= 0.0057688442211055275) * (SOC < 0.010537688442211056) * ((
# #               242.70529466691414 * SOC
# #             + -6.753780468185134) * SOC
# #             + 0.31664018311717224)
# #         + (SOC >= 0.010537688442211056) * (SOC < 0.02007537688442211) * ((
# #               29.414628314249512 * SOC
# #             + -2.2585992888731816) * SOC
# #             + 0.29295577373773196)
# #         + (SOC >= 0.02007537688442211) * (SOC < 0.03438190954773869) * ((
# #               14.334426517875443 * SOC
# #             + -1.6531178197624818) * SOC
# #             + 0.28687813939326645)
# #         + (SOC >= 0.03438190954773869) * (SOC < 0.06299497487437186) * ((
# #               3.991626086764356 * SOC
# #             + -0.9419073619769449) * SOC
# #             + 0.2746517525787724)
# #         + (SOC >= 0.06299497487437186) * (SOC < 0.12022110552763819) * ((
# #               0.08873611565818607 * SOC
# #             + -0.45018245064239704) * SOC
# #             + 0.2591636533614611)
# #         + (SOC >= 0.12022110552763819) * (SOC < 0.15360301507537688) * ((
# #               -3.6756413445991143 * SOC
# #             + 0.45493278914850777) * SOC
# #             + 0.2047566759826731)
# #         + (SOC >= 0.15360301507537688) * (SOC < 0.16790954773869346) * ((
# #               -14.532844430025932 * SOC
# #             + 3.7903310475630008) * SOC
# #             + -0.05140693850214184)
# #         + (SOC >= 0.16790954773869346) * (SOC < 0.18221608040201004) * ((
# #               11.51032995142333 * SOC
# #             + -4.9554642165751375) * SOC
# #             + 0.6828443252061795)
# #         + (SOC >= 0.18221608040201004) * (SOC < 0.19652261306532662) * ((
# #               16.525210323537863 * SOC
# #             + -6.7830479067584974) * SOC
# #             + 0.84935189352211)
# #         + (SOC >= 0.19652261306532662) * (SOC < 0.2108291457286432) * ((
# #               2.063836328120118 * SOC
# #             + -1.0990738945695853) * SOC
# #             + 0.29083718078672405)
# #         + (SOC >= 0.2108291457286432) * (SOC < 0.23944221105527638) * ((
# #               2.1371599710504725 * SOC
# #             + -1.1299914165710305) * SOC
# #             + 0.2940963381625261)
# #         + (SOC >= 0.23944221105527638) * (SOC < 0.35866331658291456) * ((
# #               0.200593496808259 * SOC
# #             + -0.20259989967488323) * SOC
# #             + 0.18306800050276567)
# #         + (SOC >= 0.35866331658291456) * (SOC < 0.47788442211055276) * ((
# #               -0.07270257560313986 * SOC
# #             + -0.006557348194566437) * SOC
# #             + 0.14791136465011234)
# #         + (SOC >= 0.47788442211055276) * (SOC < 0.5398793969849246) * ((
# #               -0.4773102412066841 * SOC
# #             + 0.38015405272232883) * SOC
# #             + 0.055509687474745384)
# #         + (SOC >= 0.5398793969849246) * (SOC < 0.5684924623115578) * ((
# #               -3.0433921938373913 * SOC
# #             + 3.150903607122686) * SOC
# #             + -0.6924256118382033)
# #         + (SOC >= 0.5684924623115578) * (SOC < 0.5780301507537688) * ((
# #               -11.947070376478564 * SOC
# #             + 13.274251474481503) * SOC
# #             + -3.5699490898138606)
# #         + (SOC >= 0.5780301507537688) * (SOC < 0.5827989949748743) * ((
# #               -93.20198130024392 * SOC
# #             + 107.20982829597824) * SOC
# #             + -30.71874690544962)
# #         + (SOC >= 0.5827989949748743) * (SOC < 0.5875678391959799) * ((
# #               36.306615761895955 * SOC
# #             + -43.74513212086413) * SOC
# #             + 13.269452703254387)
# #         + (SOC >= 0.5875678391959799) * (SOC < 0.5923366834170855) * ((
# #               92.22624505816384 * SOC
# #             + -109.45828362936072) * SOC
# #             + 32.574919922556774)
# #         + (SOC >= 0.5923366834170855) * (SOC < 0.5971055276381909) * ((
# #               16.739410578734635 * SOC
# #             + -20.031041274961893) * SOC
# #             + 6.089401850886269)
# #         + (SOC >= 0.5971055276381909) * (SOC < 0.7163266331658291) * ((
# #               0.13559219837391545 * SOC
# #             + -0.20257780533398462) * SOC
# #             + 0.16955927974304008)
# #         + (SOC >= 0.7163266331658291) * ((
# #               -0.01651643769527822 * SOC
# #             + 0.015341128967798934) * SOC
# #             + 0.09150871148729933)
# #     )
# def OCV_Curve_Fit(SOC):
#     return (
#           (SOC < 0.006015075376884422) * ((
#               6445.033805662573 * SOC
#             + -117.81906958397076) * SOC
#             + 1.681028598581628)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
#               2316.054673108596 * SOC
#             + -68.1468281601808) * SOC
#             + 1.5316374604301792)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
#               229.45010289051834 * SOC
#             + -22.11570221416389) * SOC
#             + 1.2777723311550362)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
#               139.7477158642423 * SOC
#             + -18.337383580725486) * SOC
#             + 1.2379860663491549)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
#               -22.03422063883096 * SOC
#             + -6.654939221181948) * SOC
#             + 1.0270856574965916)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.07121105527638191) * ((
#               67.20442530651599 * SOC
#             + -18.46941844769526) * SOC
#             + 1.418121172197246)
#         + (SOC >= 0.07121105527638191) * (SOC < 0.07622613065326633) * ((
#               1053.5405970157408 * SOC
#             + -158.9454977370558) * SOC
#             + 6.419846095839297)
#         + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * ((
#               -266.38511129825656 * SOC
#             + 42.28016125203942) * SOC
#             + -1.2494805906069182)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
#               61.43118256719072 * SOC
#             + -10.984220887886863) * SOC
#             + 0.914150731142299)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.10631658291457287) * ((
#               -542.1005754734292 * SOC
#             + 105.23961846705095) * SOC
#             + -4.68123868061641)
#         + (SOC >= 0.10631658291457287) * (SOC < 0.11133165829145729) * ((
#               314.86527817215256 * SOC
#             + -76.97974400108512) * SOC
#             + 5.005231298625702)
#         + (SOC >= 0.11133165829145729) * (SOC < 0.12637688442211056) * ((
#               179.2684915797104 * SOC
#             + -46.787313780426565) * SOC
#             + 3.324544636468178)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.19157286432160803) * ((
#               7.722287343988146 * SOC
#             + -3.4283641289272877) * SOC
#             + 0.5847601520823622)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.2517537688442211) * ((
#               1.4173935258948909 * SOC
#             + -1.012670992975837) * SOC
#             + 0.3533695253942292)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.5025075376884423) * ((
#               0.20853323534757595 * SOC
#             + -0.4040007246730245) * SOC
#             + 0.27675200837990077)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.5677035175879397) * ((
#               -1.1067170839604739 * SOC
#             + 0.9178456741258252) * SOC
#             + -0.055366881151472036)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
#               1.8979936929899308 * SOC
#             + -2.493724080692452) * SOC
#             + 0.9130131940020072)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
#               0.4809065256252585 * SOC
#             + -0.7141901663703507) * SOC
#             + 0.3543423822918774)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
#               -0.45152258320056937 * SOC
#             + 0.6905353711561091) * SOC
#             + -0.17472031456661163)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
#               -7.846241099974904 * SOC
#             + 13.685099571552861) * SOC
#             + -5.88348050520775)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
#               -0.2599640694896408 * SOC
#             + -0.10263489439554974) * SOC
#             + 0.38117411192468964)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
#               -13.935975921611387 * SOC
#             + 25.575967259098434) * SOC
#             + -11.672606911508737)
#         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
#               -2.442877656503491 * SOC
#             + 3.650254499455002) * SOC
#             + -1.2155293478837308)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9839547738693467) * ((
#               -68.99594214654809 * SOC
#             + 132.61805373080148) * SOC
#             + -63.69459536093299)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
#               257.4136305190445 * SOC
#             + -509.7264607911251) * SOC
#             + 252.3243804053859)
#         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
#               -1470.946630194909 * SOC
#             + 2908.8659121717856) * SOC
#             + -1438.1180114563365)
#         + (SOC >= 0.9939849246231156) * ((
#               -4647.107887194428 * SOC
#             + 9222.978727430838) * SOC
#             + -4576.184486824896)
#     )

# # def TE_0000003262_lithiation_extraction(SOC):
# #     return (
# #           (SOC < 0.006015075376884422) * ((
# #               3796.83317416261 * SOC
# #             + -62.73480757488008) * SOC
# #             + 0.8895692693129978)
# #         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
# #               690.0582306864599 * SOC
# #             + -25.35983664683033) * SOC
# #             + 0.7771626356424561)
# #         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
# #               167.22440456834192 * SOC
# #             + -13.825964804325125) * SOC
# #             + 0.7135524630437156)
# #         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
# #               7.732562793529723 * SOC
# #             + -7.108072252785057) * SOC
# #             + 0.6428120417283776)
# #         + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * ((
# #               -29.52026500215561 * SOC
# #             + -4.418006245629272) * SOC
# #             + 0.5942489154434178)
# #         + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * ((
# #               175.38168188917552 * SOC
# #             + -23.324586892959132) * SOC
# #             + 1.0303828775618458)
# #         + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * ((
# #               120.30834478797806 * SOC
# #             + -17.690501482375282) * SOC
# #             + 0.8862890197871396)
# #         + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * ((
# #               62.43772225903513 * SOC
# #             + -10.609347419160315) * SOC
# #             + 0.669673314461404)
# #         + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * ((
# #               39.71951139583257 * SOC
# #             + -7.601638959854114) * SOC
# #             + 0.5701242101035175)
# #         + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * ((
# #               99.08819759472317 * SOC
# #             + -16.652529421673023) * SOC
# #             + 0.915081389539024)
# #         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
# #               12.653399803860452 * SOC
# #             + -2.6083949906691757) * SOC
# #             + 0.344600180126863)
# #         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
# #               -0.18079163077010207 * SOC
# #             + -0.13687798485051772) * SOC
# #             + 0.22561340286934772)
# #         + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * ((
# #               -20.63152799276571 * SOC
# #             + 5.032122706283445) * SOC
# #             + -0.10100769859127556)
# #         + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * ((
# #               5.5942575652046855 * SOC
# #             + -2.6487377655237907) * SOC
# #             + 0.46137409791358497)
# #         + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * ((
# #               2.4908350011221074 * SOC
# #             + -1.6464414429429297) * SOC
# #             + 0.3804474840288208)
# #         + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * ((
# #               -1.7551771802641838 * SOC
# #             + -0.01960001187769933) * SOC
# #             + 0.2246181476557041)
# #         + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * ((
# #               9.482908887799738 * SOC
# #             + -4.6635837793207315) * SOC
# #             + 0.7043836767159011)
# #         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
# #               9.666235984758828 * SOC
# #             + -4.7448575639837) * SOC
# #             + 0.7133913850457159)
# #         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
# #               3.559857544760767 * SOC
# #             + -1.853993680404713) * SOC
# #             + 0.37124529651308125)
# #         + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * ((
# #               0.1405942024173763 * SOC
# #             + -0.13236881419305035) * SOC
# #             + 0.15453252221072356)
# #         + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * ((
# #               -0.19749372401334497 * SOC
# #             + 0.12263782691950809) * SOC
# #             + 0.10644711163570753)
# #         + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * ((
# #               -0.5563780009265145 * SOC
# #             + 0.4401259747258166) * SOC
# #             + 0.036230379891094344)
# #         + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * ((
# #               -2.3410418719803374 * SOC
# #             + 2.1263373835865593) * SOC
# #             + -0.36206715970288883)
# #         + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * ((
# #               -12.111447874125247 * SOC
# #             + 11.651746772913782) * SOC
# #             + -2.683706199430773)
# #         + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * ((
# #               -28.75277657418451 * SOC
# #             + 28.376532990775445) * SOC
# #             + -6.885871769782398)
# #         + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * ((
# #               32.02681788459779 * SOC
# #             + -33.927132705943166) * SOC
# #             + 9.080616629053821)
# #         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
# #               12.45312774317648 * SOC
# #             + -13.469970781354789) * SOC
# #             + 3.7354891775466257)
# #         + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * ((
# #               0.6695615379886348 * SOC
# #             + -0.799972485254095) * SOC
# #             + 0.3297108667216655)
# #         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
# #               0.1693613393040243 * SOC
# #             + -0.2320416606712179) * SOC
# #             + 0.16850270329051353)
# #         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
# #               0.019732088293821004 * SOC
# #             + -0.04414190906846871) * SOC
# #             + 0.10951303981560945)
# #         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
# #               -0.03485357179855786 * SOC
# #             + 0.03809262220979903) * SOC
# #             + 0.07854099457922548)
# #         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
# #               -0.33588186354069904 * SOC
# #             + 0.5670825295748472) * SOC
# #             + -0.15385437304104954)
# #         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
# #               -0.4365655116458811 * SOC
# #             + 0.7500707594481781) * SOC
# #             + -0.23699769596969844)
# #         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
# #               -9.933948732168204 * SOC
# #             + 18.58272020843401) * SOC
# #             + -8.607813608800711)
# #         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
# #               -72.93596313959816 * SOC
# #             + 138.77346767380027) * SOC
# #             + -65.93064650610825)
# #         + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * ((
# #               9.26995702809063 * SOC
# #             + -20.526734188435967) * SOC
# #             + 11.243096764402935)
# #         + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * ((
# #               435.1364714128962 * SOC
# #             + -850.0505032279702) * SOC
# #             + 415.1899088280236)
# #         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
# #               -383.079292268435 * SOC
# #             + 751.917282771994) * SOC
# #             + -368.9250218826975)
# #         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
# #               151.75008294452346 * SOC
# #             + -300.5785511207064) * SOC
# #             + 148.8791282354632)
# #         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
# #               -888.3864044908313 * SOC
# #             + 1756.7486992281872) * SOC
# #             + -868.4381820783909)
# #         + (SOC >= 0.9939849246231156) * ((
# #               -1149.9297243353903 * SOC
# #             + 2276.6889333509334) * SOC
# #             + -1126.8445592899031)
# #     )


# # def _18650_LG_3500_MJ1_Anode_GITT_ch_ohne_EIS_2340__extraction(SOC):
# #     return (
# #         (SOC < 0.006015075376884422) * ((
# #             2611.200321010252 * SOC
# #             + -44.014897454439364) * SOC
# #             + 0.6631788045297925)
# #         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
# #             590.1040343292225 * SOC
# #             + -19.700804437784143) * SOC
# #             + 0.5900532534219125)
# #         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
# #             123.37396959056673 * SOC
# #             + -9.404598487016845) * SOC
# #             + 0.5332689015075048)
# #         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
# #             29.794412456834323 * SOC
# #             + -5.462971110660323) * SOC
# #             + 0.4917629710192882)
# #         + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
# #             29.40749672243942 * SOC
# #             + -5.435031517176622) * SOC
# #             + 0.4912585841369255)
# #         + (SOC >= 0.06619597989949749) * (SOC < 0.08124120603015075) * ((
# #             21.24495765041445 * SOC
# #             + -4.354376972495373) * SOC
# #             + 0.4554910908779144)
# #         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
# #             6.451788775776038 * SOC
# #             + -1.9507472117287463) * SOC
# #             + 0.3578542005705936)
# #         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
# #             4.05376701130659 * SOC
# #             + -1.4889532918393087) * SOC
# #             + 0.33562195610074064)
# #         + (SOC >= 0.12637688442211056) * (SOC < 0.19157286432160803) * ((
# #             0.07815275586434112 * SOC
# #             + -0.48410180530546576) * SOC
# #             + 0.27212695601320386)
# #         + (SOC >= 0.19157286432160803) * (SOC < 0.22166331658291458) * ((
# #             -3.041963340143667 * SOC
# #             + 0.7113573497509478) * SOC
# #             + 0.15761818875637967)
# #         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
# #             -11.347613374194282 * SOC
# #             + 4.393473215600238) * SOC
# #             + -0.25047681867698124)
# #         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
# #             4.123890178479769 * SOC
# #             + -2.9310009034822713) * SOC
# #             + 0.616405978758646)
# #         + (SOC >= 0.2517537688442211) * (SOC < 0.26178391959798997) * ((
# #             35.85026903073913 * SOC
# #             + -18.905471799154043) * SOC
# #             + 2.627222605397499)
# #         + (SOC >= 0.26178391959798997) * (SOC < 0.2718140703517588) * ((
# #             -2.225931486993659 * SOC
# #             + 1.0300022307082486) * SOC
# #             + 0.017829340106857217)
# #         + (SOC >= 0.2718140703517588) * (SOC < 0.28685929648241204) * ((
# #             3.215175673569803 * SOC
# #             + -1.927936738357559) * SOC
# #             + 0.41983405562378806)
# #         + (SOC >= 0.28685929648241204) * (SOC < 0.31694974874371856) * ((
# #             0.4214622367463505 * SOC
# #             + -0.3251313962362552) * SOC
# #             + 0.18994424920419872)
# #         + (SOC >= 0.31694974874371856) * (SOC < 0.37713065326633166) * ((
# #             0.19345834165076603 * SOC
# #             + -0.18059984170999233) * SOC
# #             + 0.1670396292578784)
# #         + (SOC >= 0.37713065326633166) * (SOC < 0.5025075376884423) * ((
# #             -0.06467704763863669 * SOC
# #             + 0.014101694277751875) * SOC
# #             + 0.13032567052837074)
# #         + (SOC >= 0.5025075376884423) * (SOC < 0.5225678391959799) * ((
# #             -0.9041486319540297 * SOC
# #             + 0.8577832918652462) * SOC
# #             + -0.08165251057000233)
# #         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
# #             -2.039171272962051 * SOC
# #             + 2.04403594976543) * SOC
# #             + -0.3916012546597045)
# #         + (SOC >= 0.5376130653266331) * (SOC < 0.5526582914572864) * ((
# #             0.03054135721589546 * SOC
# #             + -0.1813731531451026) * SOC
# #             + 0.20660325005104596)
# #         + (SOC >= 0.5526582914572864) * (SOC < 0.5626884422110553) * ((
# #             -64.04982791047803 * SOC
# #             + 70.64772163772636) * SOC
# #             + -19.365540006243577)
# #         + (SOC >= 0.5626884422110553) * (SOC < 0.5677035175879397) * ((
# #             -95.03964567695334 * SOC
# #             + 105.52294620457042) * SOC
# #             + -29.177482897882896)
# #         + (SOC >= 0.5677035175879397) * (SOC < 0.5727185929648241) * ((
# #             319.6491005036853 * SOC
# #             + -365.3175736171902) * SOC
# #             + 104.47142676499095)
# #         + (SOC >= 0.5727185929648241) * (SOC < 0.5777336683417086) * ((
# #             -141.9398918721131 * SOC
# #             + 163.40362286584605) * SOC
# #             + -46.93280309523027)
# #         + (SOC >= 0.5777336683417086) * (SOC < 0.582748743718593) * ((
# #             57.52477264738468 * SOC
# #             + -67.07128180894938) * SOC
# #             + 19.643752974007214)
# #         + (SOC >= 0.582748743718593) * (SOC < 0.5977939698492463) * ((
# #             -1.2417496154890841 * SOC
# #             + 1.4209522338515512) * SOC
# #             + -0.3131286974537133)
# #         + (SOC >= 0.5977939698492463) * (SOC < 0.6278844221105527) * ((
# #             0.6393780549080965 * SOC
# #             + -0.8281013219085516) * SOC
# #             + 0.35910662929695825)
# #         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
# #             0.04467902196737095 * SOC
# #             + -0.08129680465316103) * SOC
# #             + 0.12465316792373748)
# #         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
# #             -0.016069883896605575 * SOC
# #             + 0.010222795749896818) * SOC
# #             + 0.09018408103726028)
# #         + (SOC >= 0.8786381909547738) * (SOC < 0.938819095477387) * ((
# #             -0.09944273371575463 * SOC
# #             + 0.15673193562957266) * SOC
# #             + 0.025819818226150204)
# #         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
# #             -0.6591340067329554 * SOC
# #             + 1.2076296449907886) * SOC
# #             + -0.467481600244696)
# #         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
# #             0.3894609202889683 * SOC
# #             + -0.7928049324199833) * SOC
# #             + 0.4865899853069209)
# #         + (SOC >= 0.9689095477386934) * (SOC < 0.9789396984924623) * ((
# #             -7.8655993960180695 * SOC
# #             + 15.204008582837105) * SOC
# #             + -7.263142688857215)
# #         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
# #             32.38027382727455 * SOC
# #             + -63.59255741471452) * SOC
# #             + 31.305400591085117)
# #         + (SOC >= 0.9839547738693467) * (SOC < 0.9939849246231156) * ((
# #             -47.740338914274105 * SOC
# #             + 94.0775613700531) * SOC
# #             + -46.26473244632439)
# #         + (SOC >= 0.9939849246231156) * ((
# #             -2789.0460758191894 * SOC
# #             + 5543.710713902746) * SOC
# #             + -2754.691331618245)
# #     )

def TE_0000003262_lithiation_extraction(SOC):
    return (
          (SOC < 0.006015075376884422) * ((
              3796.83317416261 * SOC
            + -62.73480757488008) * SOC
            + 0.8895692693129978)
        + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
              690.0582306864599 * SOC
            + -25.35983664683033) * SOC
            + 0.7771626356424561)
        + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
              167.22440456834192 * SOC
            + -13.825964804325125) * SOC
            + 0.7135524630437156)
        + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
              7.732562793529723 * SOC
            + -7.108072252785057) * SOC
            + 0.6428120417283776)
        + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * ((
              -29.52026500215561 * SOC
            + -4.418006245629272) * SOC
            + 0.5942489154434178)
        + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * ((
              175.38168188917552 * SOC
            + -23.324586892959132) * SOC
            + 1.0303828775618458)
        + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * ((
              120.30834478797806 * SOC
            + -17.690501482375282) * SOC
            + 0.8862890197871396)
        + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * ((
              62.43772225903513 * SOC
            + -10.609347419160315) * SOC
            + 0.669673314461404)
        + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * ((
              39.71951139583257 * SOC
            + -7.601638959854114) * SOC
            + 0.5701242101035175)
        + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * ((
              99.08819759472317 * SOC
            + -16.652529421673023) * SOC
            + 0.915081389539024)
        + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
              12.653399803860452 * SOC
            + -2.6083949906691757) * SOC
            + 0.344600180126863)
        + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
              -0.18079163077010207 * SOC
            + -0.13687798485051772) * SOC
            + 0.22561340286934772)
        + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * ((
              -20.63152799276571 * SOC
            + 5.032122706283445) * SOC
            + -0.10100769859127556)
        + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * ((
              5.5942575652046855 * SOC
            + -2.6487377655237907) * SOC
            + 0.46137409791358497)
        + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * ((
              2.4908350011221074 * SOC
            + -1.6464414429429297) * SOC
            + 0.3804474840288208)
        + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * ((
              -1.7551771802641838 * SOC
            + -0.01960001187769933) * SOC
            + 0.2246181476557041)
        + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * ((
              9.482908887799738 * SOC
            + -4.6635837793207315) * SOC
            + 0.7043836767159011)
        + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
              9.666235984758828 * SOC
            + -4.7448575639837) * SOC
            + 0.7133913850457159)
        + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
              3.559857544760767 * SOC
            + -1.853993680404713) * SOC
            + 0.37124529651308125)
        + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * ((
              0.1405942024173763 * SOC
            + -0.13236881419305035) * SOC
            + 0.15453252221072356)
        + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * ((
              -0.19749372401334497 * SOC
            + 0.12263782691950809) * SOC
            + 0.10644711163570753)
        + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * ((
              -0.5563780009265145 * SOC
            + 0.4401259747258166) * SOC
            + 0.036230379891094344)
        + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * ((
              -2.3410418719803374 * SOC
            + 2.1263373835865593) * SOC
            + -0.36206715970288883)
        + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * ((
              -12.111447874125247 * SOC
            + 11.651746772913782) * SOC
            + -2.683706199430773)
        + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * ((
              -28.75277657418451 * SOC
            + 28.376532990775445) * SOC
            + -6.885871769782398)
        + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * ((
              32.02681788459779 * SOC
            + -33.927132705943166) * SOC
            + 9.080616629053821)
        + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
              12.45312774317648 * SOC
            + -13.469970781354789) * SOC
            + 3.7354891775466257)
        + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * ((
              0.6695615379886348 * SOC
            + -0.799972485254095) * SOC
            + 0.3297108667216655)
        + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
              0.1693613393040243 * SOC
            + -0.2320416606712179) * SOC
            + 0.16850270329051353)
        + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
              0.019732088293821004 * SOC
            + -0.04414190906846871) * SOC
            + 0.10951303981560945)
        + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
              -0.03485357179855786 * SOC
            + 0.03809262220979903) * SOC
            + 0.07854099457922548)
        + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
              -0.33588186354069904 * SOC
            + 0.5670825295748472) * SOC
            + -0.15385437304104954)
        + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
              -0.4365655116458811 * SOC
            + 0.7500707594481781) * SOC
            + -0.23699769596969844)
        + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
              -9.933948732168204 * SOC
            + 18.58272020843401) * SOC
            + -8.607813608800711)
        + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
              -72.93596313959816 * SOC
            + 138.77346767380027) * SOC
            + -65.93064650610825)
        + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * ((
              9.26995702809063 * SOC
            + -20.526734188435967) * SOC
            + 11.243096764402935)
        + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * ((
              435.1364714128962 * SOC
            + -850.0505032279702) * SOC
            + 415.1899088280236)
        + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
              -383.079292268435 * SOC
            + 751.917282771994) * SOC
            + -368.9250218826975)
        + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
              151.75008294452346 * SOC
            + -300.5785511207064) * SOC
            + 148.8791282354632)
        + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
              -888.3864044908313 * SOC
            + 1756.7486992281872) * SOC
            + -868.4381820783909)
        + (SOC >= 0.9939849246231156) * ((
              -1149.9297243353903 * SOC
            + 2276.6889333509334) * SOC
            + -1126.8445592899031)
    )
# def init_electrode_concentration(par):
#     return 0.8 * max_electrode_concentration(par)
def OCV_Curve_Fit(SOC):
    return (
          (SOC < 0.006015075376884422) * ((
              6454.526192813781 * SOC
            + -109.99096425422131) * SOC
            + 1.3780120418449677)
        + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
              1664.4449928048562 * SOC
            + -52.36556529531998) * SOC
            + 1.2047014826645535)
        + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
              273.64245567230046 * SOC
            + -21.684041988727465) * SOC
            + 1.03549056895106)
        + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
              117.80159729584864 * SOC
            + -15.119931059524362) * SOC
            + 0.9663694913020889)
        + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
              11.758999406062458 * SOC
            + -7.462483161653864) * SOC
            + 0.8281313929448038)
        + (SOC >= 0.06619597989949749) * (SOC < 0.08124120603015075) * ((
              24.667498692758045 * SOC
            + -9.171464680283435) * SOC
            + 0.8846952460727113)
        + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
              106.37252331573148 * SOC
            + -22.447094158470456) * SOC
            + 1.42395932088138)
        + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
              22.99209139952763 * SOC
            + -6.390285555994271) * SOC
            + 0.6509329147707108)
        + (SOC >= 0.12637688442211056) * (SOC < 0.2517537688442211) * ((
              1.5263797414812035 * SOC
            + -0.9647460334997117) * SOC
            + 0.3081015241897664)
        + (SOC >= 0.2517537688442211) * (SOC < 0.5025075376884423) * ((
              -0.0012893655984924646 * SOC
            + -0.195553122991313) * SOC
            + 0.21127791709539379)
        + (SOC >= 0.5025075376884423) * (SOC < 0.5677035175879397) * ((
              0.03775922095297446 * SOC
            + -0.23479754114769769) * SOC
            + 0.22113822506328296)
        + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
              1.5100263541424326 * SOC
            + -1.906420001829236) * SOC
            + 0.6956312005672403)
        + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
              -0.034029838510602595 * SOC
            + 0.03255765863111115) * SOC
            + 0.08690426665553397)
        + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
              -0.14468303281629424 * SOC
            + 0.19925919806054715) * SOC
            + 0.024119356959723337)
        + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
              -6.930915528557158 * SOC
            + 12.124545284973067) * SOC
            + -5.214886540051744)
        + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
              -0.5966674356694099 * SOC
            + 0.6123199344852068) * SOC
            + 0.015857921521561735)
        + (SOC >= 0.938819095477387) * (SOC < 0.9689095477386934) * ((
              -14.271913036640505 * SOC
            + 26.28948334555478) * SOC
            + -12.03724774248115)
        + (SOC >= 0.9689095477386934) * (SOC < 0.9839547738693467) * ((
              -35.50579523207783 * SOC
            + 67.43690573499055) * SOC
            + -31.97131295146174)
        + (SOC >= 0.9839547738693467) * (SOC < 0.9939849246231156) * ((
              -854.1774752673916 * SOC
            + 1678.5087213397615) * SOC
            + -824.5822149567967)
        + (SOC >= 0.9939849246231156) * ((
              -8832.735084375538 * SOC
            + 17539.64068872085) * SOC
            + -8707.44524647409)
    )


# def OCV_Curve_Fit(SOC):
#     return (
#           (SOC < 0.08165829145728642) * ((
#               3.698031497853634 * SOC
#             + -1.3047909696011573) * SOC
#             + 0.244599917097662)
#         + (SOC >= 0.08165829145728642) * (SOC < 0.10879396984924623) * ((
#               0.7097203918896042 * SOC
#             + -0.8167502110894347) * SOC
#             + 0.22467362984686956)
#         + (SOC >= 0.10879396984924623) * (SOC < 0.12236180904522613) * ((
#               5.438207168314705 * SOC
#             + -1.8456119066633647) * SOC
#             + 0.2806406039905256)
#         + (SOC >= 0.12236180904522613) * (SOC < 0.135929648241206) * ((
#               12.956913601366267 * SOC
#             + -3.6856169483196908) * SOC
#             + 0.3932137767652284)
#         + (SOC >= 0.135929648241206) * (SOC < 0.1630653266331658) * ((
#               2.076336432972049 * SOC
#             + -0.7276308939974285) * SOC
#             + 0.19217477483201972)
#         + (SOC >= 0.1630653266331658) * (SOC < 0.2761306532663316) * ((
#               0.12575376836321794 * SOC
#             + -0.09148609533856877) * SOC
#             + 0.1403081951423715)
#         + (SOC >= 0.2761306532663316) * (SOC < 0.38919597989949745) * ((
#               -0.11454835693864052 * SOC
#             + 0.04122347034321017) * SOC
#             + 0.12198560560917093)
#         + (SOC >= 0.38919597989949745) * (SOC < 0.4208542713567839) * ((
#               -1.9461310969284114 * SOC
#             + 1.4669127488578653) * SOC
#             + -0.15545066228268745)
#         + (SOC >= 0.4208542713567839) * (SOC < 0.4344221105527638) * ((
#               -15.52640927719142 * SOC
#             + 12.897548905611899) * SOC
#             + -2.5607666877302933)
#         + (SOC >= 0.4344221105527638) * (SOC < 0.4479899497487437) * ((
#               -5.784760088154542 * SOC
#             + 4.433573303679907) * SOC
#             + -0.7222976154010894)
#         + (SOC >= 0.4479899497487437) * (SOC < 0.45703517587939696) * ((
#               1.0095482324543354 * SOC
#             + -1.6539903825740794) * SOC
#             + 0.6412860595474967)
#         + (SOC >= 0.45703517587939696) * (SOC < 0.4615577889447236) * ((
#               41.07792602948257 * SOC
#             + -38.279306569908044) * SOC
#             + 9.010814972205878)
#         + (SOC >= 0.4615577889447236) * (SOC < 0.47512562814070347) * ((
#               10.878143241549338 * SOC
#             + -10.401416629489262) * SOC
#             + 2.5771863515338183)
#         + (SOC >= 0.47512562814070347) * (SOC < 0.5022613065326633) * ((
#               0.7661466416202423 * SOC
#             + -0.7924791568933607) * SOC
#             + 0.2944601253178867)
#         + (SOC >= 0.5022613065326633) * (SOC < 0.6153266331658291) * ((
#               0.059075916975336096 * SOC
#             + -0.08221062495107123) * SOC
#             + 0.116089924896703)
#         + (SOC >= 0.6153266331658291) * (SOC < 0.728391959798995) * ((
#               -0.0018742157039794982 * SOC
#             + -0.007202145085924094) * SOC
#             + 0.09301256720954876)
#         + (SOC >= 0.728391959798995) * (SOC < 0.8414572864321608) * ((
#               -0.039587407621262116 * SOC
#             + 0.04773782645588476) * SOC
#             + 0.07300365043822943)
#         + (SOC >= 0.8414572864321608) * (SOC < 0.8685929648241206) * ((
#               -0.6197129170391662 * SOC
#             + 1.0240395003456229) * SOC
#             + -0.3377544281869902)
#         + (SOC >= 0.8685929648241206) * (SOC < 0.8821608040201006) * ((
#               -0.7086946015035664 * SOC
#             + 1.178617230593602) * SOC
#             + -0.40488699269292283)
#         + (SOC >= 0.8821608040201006) * (SOC < 0.8912060301507537) * ((
#               -15.79183324961923 * SOC
#             + 27.790124664530367) * SOC
#             + -12.142701389747401)
#         + (SOC >= 0.8912060301507537) * (SOC < 0.8957286432160804) * ((
#               -48.76107024787248 * SOC
#             + 86.55489030915595) * SOC
#             + -38.32845814119031)
#         + (SOC >= 0.8957286432160804) * ((
#               -4.649788918117044 * SOC
#             + 7.531413957106269) * SOC
#             + -2.9366625136705444)
#     )
# def OCV_Curve_Fit(SOC):
#     return (
#           (SOC < 0.006015075376884422) * ((
#               10022.499674934777 * SOC
#             + -166.65425389405667) * SOC
#             + 1.9077064744778063)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
#               2224.4798296722092 * SOC
#             + -72.84289957466675) * SOC
#             + 1.6255652907584348)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
#               446.12339590356305 * SOC
#             + -33.61182045786097) * SOC
#             + 1.409202932312735)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
#               168.48204612481743 * SOC
#             + -21.91739938326073) * SOC
#             + 1.2860589154191426)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.06619597989949749) * ((
#               21.756453311083988 * SOC
#             + -11.322189490128341) * SOC
#             + 1.09478609360468)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.08124120603015075) * ((
#               -10.262092821589704 * SOC
#             + -7.083191417709159) * SOC
#             + 0.954483778006745)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.0912713567839196) * ((
#               360.9540116879855 * SOC
#             + -67.39927947405383) * SOC
#             + 3.404559646365855)
#         + (SOC >= 0.0912713567839196) * (SOC < 0.09628643216080401) * ((
#               17.199743286736975 * SOC
#             + -4.649442519562598) * SOC
#             + 0.5409282679627765)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
#               14.55711364493716 * SOC
#             + -4.140543760100085) * SOC
#             + 0.5164282450229237)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.19157286432160803) * ((
#               0.19206905980188083 * SOC
#             + -0.509724601591877) * SOC
#             + 0.28700243844673523)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * ((
#               -4.940134109049836 * SOC
#             + 1.4566571210828556) * SOC
#             + 0.09864974896550649)
#         + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * ((
#               -8.952659344339452 * SOC
#             + 3.114777725096957) * SOC
#             + -0.07264910750496156)
#         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
#               -15.390732284622857 * SOC
#             + 5.968946925788799) * SOC
#             + -0.3889814130620479)
#         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
#               34.508316355281494 * SOC
#             + -17.65411524690157) * SOC
#             + 2.4069088976027313)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.28685929648241204) * ((
#               2.4076795963414597 * SOC
#             + -1.4912026741765985) * SOC
#             + 0.3723718197611485)
#         + (SOC >= 0.28685929648241204) * (SOC < 0.31694974874371856) * ((
#               0.41380934504428524 * SOC
#             + -0.34728223904795996) * SOC
#             + 0.20829971413472048)
#         + (SOC >= 0.31694974874371856) * (SOC < 0.37713065326633166) * ((
#               0.2441985556914652 * SOC
#             + -0.23976604490875975) * SOC
#             + 0.19126109877557074)
#         + (SOC >= 0.37713065326633166) * (SOC < 0.5025075376884423) * ((
#               -0.1530050168377297 * SOC
#             + 0.05982924066655304) * SOC
#             + 0.13476781589330578)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.5376130653266331) * ((
#               -4.865490340181168 * SOC
#             + 4.795948033119032) * SOC
#             + -1.0551998804043201)
#         + (SOC >= 0.5376130653266331) * (SOC < 0.547643216080402) * ((
#               -82.04844441507964 * SOC
#             + 87.78507709546079) * SOC
#             + -23.363219912400893)
#         + (SOC >= 0.547643216080402) * (SOC < 0.5526582914572864) * ((
#               202.1448735358099 * SOC
#             + -223.4880081669096) * SOC
#             + 61.87007683377618)
#         + (SOC >= 0.5526582914572864) * (SOC < 0.5677035175879397) * ((
#               -0.9833262473887885 * SOC
#             + 1.0329595110440266) * SOC
#             + -0.1716103628412604)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
#               0.49628847698153855 * SOC
#             + -0.6470054563559824) * SOC
#             + 0.30525064786747524)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
#               0.021646898248302904 * SOC
#             + -0.050965349610860855) * SOC
#             + 0.11812849887829113)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8184572864321608) * ((
#               0.0015917552569142401 * SOC
#             + -0.02075182318607105) * SOC
#             + 0.10674915868344215)
#         + (SOC >= 0.8184572864321608) * (SOC < 0.8786381909547738) * ((
#               -0.08730961977344975 * SOC
#             + 0.1247721331487952) * SOC
#             + 0.04719658747708877)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
#               0.17448855436096977 * SOC
#             + -0.33527961508464443) * SOC
#             + 0.24930610538379483)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
#               -1.2609682077610032 * SOC
#             + 2.2736017365922407) * SOC
#             + -0.9360765001267382)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9689095477386934) * ((
#               1.9759855006815314 * SOC
#             + -3.804226168732157) * SOC
#             + 1.9169139481451865)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9789396984924623) * ((
#               -206.32023943964282 * SOC
#             + 399.83617603648133) * SOC
#             + -193.62860582671374)
#         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
#               -2463.541331688848 * SOC
#             + 4819.202846991007) * SOC
#             + -2356.7753440226443)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
#               1321.07272287668 * SOC
#             + -2628.5752854945413) * SOC
#             + 1307.363080066798)
#         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
#               -3769.2735156101025 * SOC
#             + 7439.822618680246) * SOC
#             + -3671.3078986546043)
#         + (SOC >= 0.9939849246231156) * ((
#               -8602.531023844487 * SOC
#             + 17048.192818693155) * SOC
#             + -8446.595463160018)
#     )


def max_electrode_concentration(par):
    return (
        par["Nominal cell capacity [A.h]"] * 3600
        / 96485.33212
        / (
            par["Positive electrode thickness [m]"]
            * par["Current collector perpendicular area [m2]"]
            * par["Positive electrode porosity"]
        )
    )

# parameters = {
#     "Negative electrode OCP [V]": TE_0000003262_lithiation_extraction,  # Dummy OCP function
#     "Positive electrode OCP [V]": TE_0000003262_lithiation_extraction,
#     "Maximum concentration in negative electrode [mol.m-3]": 21063.0,
#     "Negative electrode active material volume fraction": 1,
#     "Current collector perpendicular area [m2]": 2.545e-4,
#     "Negative electrode thickness [m]": 500e-6,
#     "Positive electrode active material volume fraction": 1,
#     "Positive electrode thickness [m]": 28e-6,
#     "Positive electrode porosity": 0.44,
#     "Maximum concentration in positive electrode [mol.m-3]": max_electrode_concentration,
# }
parameters = {
    "Negative electrode OCP [V]": OCV_Curve_Fit,  # Dummy OCP function
    "Positive electrode OCP [V]": TE_0000003262_lithiation_extraction,
    "Maximum concentration in negative electrode [mol.m-3]": 21063.0,
    "Negative electrode active material volume fraction": 1,
    "Current collector perpendicular area [m2]": 2.545e-4,
    "Negative electrode thickness [m]": 500e-6,
    "Positive electrode active material volume fraction": 1,
    "Positive electrode thickness [m]": 28e-6,
    "Positive electrode porosity": 0.44,
    "Electrode width [m]":2.545e-4**0.5,
    "Electrode height [m]":2.545e-4**0.5,
    "Maximum concentration in positive electrode [mol.m-3]": max_electrode_concentration({
        "Nominal cell capacity [A.h]": 3.5,
        "Positive electrode thickness [m]": 28e-6,
        "Current collector perpendicular area [m2]": 2.545e-4,
        "Positive electrode porosity": 0.44
    }),
}


#######################################################################################################

# from ep_bolfi.utility.preprocessing import SubstitutionDict
# from pybamm import ParameterValues

# li_metal_literature = ParameterValues("Ecker2015_graphite_halfcell")


# def electrode_length(par):
#     return par["Current collector perpendicular area [m2]"]**0.5


# def init_electrode_concentration(par):
#     return 0.8 * max_electrode_concentration(par)


# def max_electrode_concentration(par):
#     return (
#         par["Nominal cell capacity [A.h]"] * 3600
#         / 96485.33212
#         / (
#             par["Positive electrode thickness [m]"]
#             * par["Current collector perpendicular area [m2]"]
#             * par["Positive electrode porosity"]
#         )
#     )


# def specific_surface_area(par):
#     return (
#         3
#         * (1 - par["Positive electrode porosity"])
#         / par["Positive particle radius [m]"]
#     )


# def TE_0000003262_lithiation_extraction(SOC):
#     return (
#           (SOC < 0.006015075376884422) * ((
#               3796.83317416261 * SOC
#             + -62.73480757488008) * SOC
#             + 0.8895692693129978)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * ((
#               690.0582306864599 * SOC
#             + -25.35983664683033) * SOC
#             + 0.7771626356424561)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * ((
#               167.22440456834192 * SOC
#             + -13.825964804325125) * SOC
#             + 0.7135524630437156)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * ((
#               7.732562793529723 * SOC
#             + -7.108072252785057) * SOC
#             + 0.6428120417283776)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * ((
#               -29.52026500215561 * SOC
#             + -4.418006245629272) * SOC
#             + 0.5942489154434178)
#         + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * ((
#               175.38168188917552 * SOC
#             + -23.324586892959132) * SOC
#             + 1.0303828775618458)
#         + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * ((
#               120.30834478797806 * SOC
#             + -17.690501482375282) * SOC
#             + 0.8862890197871396)
#         + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * ((
#               62.43772225903513 * SOC
#             + -10.609347419160315) * SOC
#             + 0.669673314461404)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * ((
#               39.71951139583257 * SOC
#             + -7.601638959854114) * SOC
#             + 0.5701242101035175)
#         + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * ((
#               99.08819759472317 * SOC
#             + -16.652529421673023) * SOC
#             + 0.915081389539024)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * ((
#               12.653399803860452 * SOC
#             + -2.6083949906691757) * SOC
#             + 0.344600180126863)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * ((
#               -0.18079163077010207 * SOC
#             + -0.13687798485051772) * SOC
#             + 0.22561340286934772)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * ((
#               -20.63152799276571 * SOC
#             + 5.032122706283445) * SOC
#             + -0.10100769859127556)
#         + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * ((
#               5.5942575652046855 * SOC
#             + -2.6487377655237907) * SOC
#             + 0.46137409791358497)
#         + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * ((
#               2.4908350011221074 * SOC
#             + -1.6464414429429297) * SOC
#             + 0.3804474840288208)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * ((
#               -1.7551771802641838 * SOC
#             + -0.01960001187769933) * SOC
#             + 0.2246181476557041)
#         + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * ((
#               9.482908887799738 * SOC
#             + -4.6635837793207315) * SOC
#             + 0.7043836767159011)
#         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * ((
#               9.666235984758828 * SOC
#             + -4.7448575639837) * SOC
#             + 0.7133913850457159)
#         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * ((
#               3.559857544760767 * SOC
#             + -1.853993680404713) * SOC
#             + 0.37124529651308125)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * ((
#               0.1405942024173763 * SOC
#             + -0.13236881419305035) * SOC
#             + 0.15453252221072356)
#         + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * ((
#               -0.19749372401334497 * SOC
#             + 0.12263782691950809) * SOC
#             + 0.10644711163570753)
#         + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * ((
#               -0.5563780009265145 * SOC
#             + 0.4401259747258166) * SOC
#             + 0.036230379891094344)
#         + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * ((
#               -2.3410418719803374 * SOC
#             + 2.1263373835865593) * SOC
#             + -0.36206715970288883)
#         + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * ((
#               -12.111447874125247 * SOC
#             + 11.651746772913782) * SOC
#             + -2.683706199430773)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * ((
#               -28.75277657418451 * SOC
#             + 28.376532990775445) * SOC
#             + -6.885871769782398)
#         + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * ((
#               32.02681788459779 * SOC
#             + -33.927132705943166) * SOC
#             + 9.080616629053821)
#         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * ((
#               12.45312774317648 * SOC
#             + -13.469970781354789) * SOC
#             + 3.7354891775466257)
#         + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * ((
#               0.6695615379886348 * SOC
#             + -0.799972485254095) * SOC
#             + 0.3297108667216655)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * ((
#               0.1693613393040243 * SOC
#             + -0.2320416606712179) * SOC
#             + 0.16850270329051353)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * ((
#               0.019732088293821004 * SOC
#             + -0.04414190906846871) * SOC
#             + 0.10951303981560945)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * ((
#               -0.03485357179855786 * SOC
#             + 0.03809262220979903) * SOC
#             + 0.07854099457922548)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * ((
#               -0.33588186354069904 * SOC
#             + 0.5670825295748472) * SOC
#             + -0.15385437304104954)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * ((
#               -0.4365655116458811 * SOC
#             + 0.7500707594481781) * SOC
#             + -0.23699769596969844)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * ((
#               -9.933948732168204 * SOC
#             + 18.58272020843401) * SOC
#             + -8.607813608800711)
#         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * ((
#               -72.93596313959816 * SOC
#             + 138.77346767380027) * SOC
#             + -65.93064650610825)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * ((
#               9.26995702809063 * SOC
#             + -20.526734188435967) * SOC
#             + 11.243096764402935)
#         + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * ((
#               435.1364714128962 * SOC
#             + -850.0505032279702) * SOC
#             + 415.1899088280236)
#         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * ((
#               -383.079292268435 * SOC
#             + 751.917282771994) * SOC
#             + -368.9250218826975)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * ((
#               151.75008294452346 * SOC
#             + -300.5785511207064) * SOC
#             + 148.8791282354632)
#         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * ((
#               -888.3864044908313 * SOC
#             + 1756.7486992281872) * SOC
#             + -868.4381820783909)
#         + (SOC >= 0.9939849246231156) * ((
#               -1149.9297243353903 * SOC
#             + 2276.6889333509334) * SOC
#             + -1126.8445592899031)
#     )


# def derivative_TE_0000003262_lithiation_extraction(SOC):
#     return (
#           (SOC < 0.006015075376884422) * (
#               7593.66634832522 * SOC
#             + -62.73480757488008)
#         + (SOC >= 0.006015075376884422) * (SOC < 0.011030150753768845) * (
#               1380.1164613729197 * SOC
#             + -25.35983664683033)
#         + (SOC >= 0.011030150753768845) * (SOC < 0.02106030150753769) * (
#               334.44880913668385 * SOC
#             + -13.825964804325125)
#         + (SOC >= 0.02106030150753769) * (SOC < 0.03610552763819096) * (
#               15.465125587059447 * SOC
#             + -7.108072252785057)
#         + (SOC >= 0.03610552763819096) * (SOC < 0.0461356783919598) * (
#               -59.04053000431122 * SOC
#             + -4.418006245629272)
#         + (SOC >= 0.0461356783919598) * (SOC < 0.05115075376884422) * (
#               350.76336377835105 * SOC
#             + -23.324586892959132)
#         + (SOC >= 0.05115075376884422) * (SOC < 0.061180904522613065) * (
#               240.61668957595612 * SOC
#             + -17.690501482375282)
#         + (SOC >= 0.061180904522613065) * (SOC < 0.06619597989949749) * (
#               124.87544451807025 * SOC
#             + -10.609347419160315)
#         + (SOC >= 0.06619597989949749) * (SOC < 0.07622613065326633) * (
#               79.43902279166514 * SOC
#             + -7.601638959854114)
#         + (SOC >= 0.07622613065326633) * (SOC < 0.08124120603015075) * (
#               198.17639518944634 * SOC
#             + -16.652529421673023)
#         + (SOC >= 0.08124120603015075) * (SOC < 0.09628643216080401) * (
#               25.306799607720905 * SOC
#             + -2.6083949906691757)
#         + (SOC >= 0.09628643216080401) * (SOC < 0.12637688442211056) * (
#               -0.36158326154020415 * SOC
#             + -0.13687798485051772)
#         + (SOC >= 0.12637688442211056) * (SOC < 0.14643718592964824) * (
#               -41.26305598553142 * SOC
#             + 5.032122706283445)
#         + (SOC >= 0.14643718592964824) * (SOC < 0.1614824120603015) * (
#               11.188515130409371 * SOC
#             + -2.6487377655237907)
#         + (SOC >= 0.1614824120603015) * (SOC < 0.19157286432160803) * (
#               4.981670002244215 * SOC
#             + -1.6464414429429297)
#         + (SOC >= 0.19157286432160803) * (SOC < 0.20661809045226132) * (
#               -3.5103543605283676 * SOC
#             + -0.01960001187769933)
#         + (SOC >= 0.20661809045226132) * (SOC < 0.22166331658291458) * (
#               18.965817775599476 * SOC
#             + -4.6635837793207315)
#         + (SOC >= 0.22166331658291458) * (SOC < 0.23670854271356784) * (
#               19.332471969517655 * SOC
#             + -4.7448575639837)
#         + (SOC >= 0.23670854271356784) * (SOC < 0.2517537688442211) * (
#               7.119715089521534 * SOC
#             + -1.853993680404713)
#         + (SOC >= 0.2517537688442211) * (SOC < 0.37713065326633166) * (
#               0.2811884048347526 * SOC
#             + -0.13236881419305035)
#         + (SOC >= 0.37713065326633166) * (SOC < 0.44232663316582915) * (
#               -0.39498744802668995 * SOC
#             + 0.12263782691950809)
#         + (SOC >= 0.44232663316582915) * (SOC < 0.4724170854271357) * (
#               -1.112756001853029 * SOC
#             + 0.4401259747258166)
#         + (SOC >= 0.4724170854271357) * (SOC < 0.48746231155778896) * (
#               -4.682083743960675 * SOC
#             + 2.1263373835865593)
#         + (SOC >= 0.48746231155778896) * (SOC < 0.5025075376884423) * (
#               -24.222895748250494 * SOC
#             + 11.651746772913782)
#         + (SOC >= 0.5025075376884423) * (SOC < 0.512537688442211) * (
#               -57.50555314836902 * SOC
#             + 28.376532990775445)
#         + (SOC >= 0.512537688442211) * (SOC < 0.5225678391959799) * (
#               64.05363576919558 * SOC
#             + -33.927132705943166)
#         + (SOC >= 0.5225678391959799) * (SOC < 0.5376130653266331) * (
#               24.90625548635296 * SOC
#             + -13.469970781354789)
#         + (SOC >= 0.5376130653266331) * (SOC < 0.5677035175879397) * (
#               1.3391230759772697 * SOC
#             + -0.799972485254095)
#         + (SOC >= 0.5677035175879397) * (SOC < 0.6278844221105527) * (
#               0.3387226786080486 * SOC
#             + -0.2320416606712179)
#         + (SOC >= 0.6278844221105527) * (SOC < 0.7532613065326633) * (
#               0.03946417658764201 * SOC
#             + -0.04414190906846871)
#         + (SOC >= 0.7532613065326633) * (SOC < 0.8786381909547738) * (
#               -0.06970714359711572 * SOC
#             + 0.03809262220979903)
#         + (SOC >= 0.8786381909547738) * (SOC < 0.9087286432160804) * (
#               -0.6717637270813981 * SOC
#             + 0.5670825295748472)
#         + (SOC >= 0.9087286432160804) * (SOC < 0.938819095477387) * (
#               -0.8731310232917622 * SOC
#             + 0.7500707594481781)
#         + (SOC >= 0.938819095477387) * (SOC < 0.9538643216080401) * (
#               -19.86789746433641 * SOC
#             + 18.58272020843401)
#         + (SOC >= 0.9538643216080401) * (SOC < 0.9689095477386934) * (
#               -145.87192627919632 * SOC
#             + 138.77346767380027)
#         + (SOC >= 0.9689095477386934) * (SOC < 0.9739246231155779) * (
#               18.53991405618126 * SOC
#             + -20.526734188435967)
#         + (SOC >= 0.9739246231155779) * (SOC < 0.9789396984924623) * (
#               870.2729428257924 * SOC
#             + -850.0505032279702)
#         + (SOC >= 0.9789396984924623) * (SOC < 0.9839547738693467) * (
#               -766.15858453687 * SOC
#             + 751.917282771994)
#         + (SOC >= 0.9839547738693467) * (SOC < 0.9889698492462311) * (
#               303.5001658890469 * SOC
#             + -300.5785511207064)
#         + (SOC >= 0.9889698492462311) * (SOC < 0.9939849246231156) * (
#               -1776.7728089816626 * SOC
#             + 1756.7486992281872)
#         + (SOC >= 0.9939849246231156) * (
#               -2299.8594486707807 * SOC
#             + 2276.6889333509334)
#     )


# parameters = SubstitutionDict({
#     ###############
#     # Interphase. #
#     ###############
#     "Exchange-current density for lithium metal electrode [A.m-2]": (
#         li_metal_literature[
#             "Exchange-current density for lithium metal electrode [A.m-2]"
#         ]
#     ),
#     ##########################################################
#     # Electrolyte: 1.2 M LiPF6 in EC:EMC 3:7 with 0.5 % FEC. #
#     ##########################################################
#     "Cation transference number": 0.25,
#     "Electrolyte conductivity [S.m-1]": 0.88,
#     "Electrolyte diffusivity [m2.s-1]": 2.5e-10,
#     "Initial concentration in electrolyte [mol.m-3]": 1200.0,
#     "Thermodynamic factor": 2.25,
#     ################################
#     # Counter-electrode: Li-metal. #
#     ################################
#     "Lithium metal partial molar volume [m3.mol-1]": (
#         li_metal_literature["Lithium metal partial molar volume [m3.mol-1]"]
#     ),
#     "Negative electrode conductivity [S.m-1]": 10.6e6,
#     "Negative electrode thickness [m]": 500e-6,
#     #########################################
#     # Separator: Whatman GF/A from El-Cell. #
#     # Reference electrode is in its middle. #
#     #########################################
#     "Separator Bruggeman coefficient": 1.0,
#     "Separator porosity": 0.93,
#     "Separator thickness [m]": 260e-6,
#     ###############################
#     # Sample electrode: graphite. #
#     ###############################
#     "Nominal cell capacity [A.h]": 11.355 / 3600,
#     # Placeholder.
#     "Positive electrode Bruggeman coefficient": 1.5,
#     "Positive electrode conductivity [S.m-1]": 40.0,
#     # Placeholder.
#     "Positive electrode exchange-current density [A.m-2]": (
#         li_metal_literature[
#             "Positive electrode exchange-current density [A.m-2]"
#         ]
#     ),
#     "Positive electrode OCP [V]": TE_0000003262_lithiation_extraction,
#     "Positive electrode OCP entropic change [V.K-1]": 0,
#     "Positive electrode porosity": 0.44,
#     "Positive electrode thickness [m]": 28e-6,
#     "Positive electrode active material volume fraction": 1,
#     # Placeholder.
#     "Positive electrode diffusivity [m2.s-1]": (
#         li_metal_literature["Positive electrode diffusivity [m2.s-1]"]
#     ),
#     "Positive particle radius [m]": 10 * 4.7e-6,
#     ##################
#     # Cell geometry. #
#     ##################
#     "Current collector perpendicular area [m2]": 2.545e-4,
#     "Number of cells connected in series to make a battery": 1,
#     "Number of electrodes connected in parallel to make a cell": 1,
#     #######################
#     # Ambient conditions. #
#     #######################
#     "Ambient temperature [K]": 298.15,
#     "Initial temperature [K]": 298.15,
#     "Reference temperature [K]": 298.15,
#     #####################
#     # Operation limits. #
#     #####################
#     "Lower voltage cut-off [V]": 0.0,
#     "Open-circuit voltage at 0% SOC [V]": 0.0,
#     "Open-circuit voltage at 100% SOC [V]": 0.9,
#     "Upper voltage cut-off [V]": 0.9,
# },
# substitutions={
#     ##################################################
#     # Parameters determined from proxy measurements. #
#     ##################################################
#     "Initial concentration in positive electrode [mol.m-3]": (
#         init_electrode_concentration
#     ),
#     "Maximum concentration in positive electrode [mol.m-3]": (
#         max_electrode_concentration
#     ),
#     #############################################################
#     # Parameters that are intrinsically linked in 1D+1D models. #
#     #############################################################
#     "Positive electrode surface area to volume ratio [m-1]": (
#         specific_surface_area
#     ),
#     ####################################################################
#     # Parameters that we set the same, but PyBaMM could set different. #
#     ####################################################################
#     "Electrode height [m]": electrode_length,
#     "Electrode width [m]": electrode_length,
#     "Positive electrode Bruggeman coefficient (electrode)": (
#         "Positive electrode Bruggeman coefficient"
#     ),
#     "Positive electrode Bruggeman coefficient (electrolyte)": (
#         "Positive electrode Bruggeman coefficient"
#     ),
#     "Separator Bruggeman coefficient (electrode)": (
#         "Separator Bruggeman coefficient"
#     ),
#     "Separator Bruggeman coefficient (electrolyte)": (
#         "Separator Bruggeman coefficient"
#     ),
# })

# unknowns = {
#     "Positive electrode diffusivity [m2.s-1]": (1e-15, 1e-9),
#     "Positive electrode Bruggeman coefficient": (1.0, 3.0),
# #     "Positive electrode exchange-current density [A.m-2]": (0.5, 5.0),
# }
